{
  "openapi": "3.1.0",
  "components": {
    "schemas": {
      "APIKeyAuth": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type"
          },
          "apiKey": {
            "type": "string",
            "description": "Api key"
          }
        }
      },
      "Access": {
        "type": "string",
        "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
        "description": "Resources have different visibility within the UI. 'PUBLIC', 'PROTECTED' and 'PRIVATE'. Restricted resources are not visible to users who do not have the correct permissions"
      },
      "Action": {
        "type": "object",
        "required": [
          "id",
          "event",
          "type",
          "config",
          "secrets",
          "testId",
          "active",
          "runAlways"
        ],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "event": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/ObjectNode",
            "type": "array",
            "oneOf": [
              {
                "$ref": "#/components/schemas/GithubIssueCommentActionConfig"
              },
              {
                "$ref": "#/components/schemas/GithubIssueCreateActionConfig"
              },
              {
                "$ref": "#/components/schemas/HttpActionConfig"
              },
              {
                "$ref": "#/components/schemas/SlackChannelMessageActionConfig"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "github-issue-comment": "#/components/schemas/GithubIssueCommentActionConfig",
                "github-issue-create": "#/components/schemas/GithubIssueCreateActionConfig",
                "http": "#/components/schemas/HttpActionConfig",
                "slack-channel-message": "#/components/schemas/SlackChannelMessageActionConfig"
              }
            }
          },
          "secrets": {
            "type": "object",
            "properties": {
              "token": {
                "type": "string"
              },
              "modified": {
                "type": "boolean"
              }
            }
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "boolean"
          },
          "runAlways": {
            "type": "boolean"
          }
        }
      },
      "ActionLog": {
        "type": "object",
        "required": ["id", "level", "timestamp", "message", "testId", "event"],
        "description": "Action Log",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Instant"
          },
          "message": {
            "type": "string"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "event": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "ActionType": {
        "type": "string",
        "enum": [
          "HTTP",
          "GITHUB_ISSUE_COMMENT",
          "GITHUB_ISSUE_CREATE",
          "SLACK_MESSAGE"
        ],
        "description": "Type of Action"
      },
      "AllTableReports": {
        "type": "object",
        "required": ["reports", "count"],
        "properties": {
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableReportSummary"
            }
          },
          "count": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "AllowedSite": {
        "type": "object",
        "required": ["prefix"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "prefix": {
            "type": "string"
          }
        }
      },
      "AnnotationDefinition": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "text": {
            "type": "string"
          },
          "isRegion": {
            "type": "boolean"
          },
          "time": {
            "type": "integer",
            "format": "int64"
          },
          "timeEnd": {
            "type": "integer",
            "format": "int64"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "changeId": {
            "type": "integer",
            "format": "int32"
          },
          "variableId": {
            "type": "integer",
            "format": "int32"
          },
          "runId": {
            "type": "integer",
            "format": "int32"
          },
          "datasetOrdinal": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AnnotationQuery": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "datasource": {
            "type": "string"
          },
          "iconColor": {
            "type": "string"
          },
          "enable": {
            "type": "boolean"
          },
          "query": {
            "type": "string"
          }
        }
      },
      "AnnotationsQuery": {
        "type": "object",
        "properties": {
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "annotation": {
            "$ref": "#/components/schemas/AnnotationQuery"
          }
        }
      },
      "ApiKeyResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/KeyType"
          },
          "creation": {
            "$ref": "#/components/schemas/Instant"
          },
          "access": {
            "$ref": "#/components/schemas/Instant"
          },
          "isRevoked": {
            "type": "boolean"
          },
          "toExpiration": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "Banner": {
        "type": "object",
        "required": ["active", "severity", "title"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "$ref": "#/components/schemas/Instant"
          },
          "active": {
            "type": "boolean"
          },
          "severity": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "BetterOrWorse": {
        "type": "string",
        "enum": ["BETTER", "SAME", "WORSE"],
        "description": "Result of running an Experiment"
      },
      "Change": {
        "type": "object",
        "required": ["id", "variable", "timestamp", "confirmed"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "variable": {
            "$ref": "#/components/schemas/Variable"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Instant"
          },
          "confirmed": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "dataset": {
            "$ref": "#/components/schemas/DatasetInfo"
          }
        }
      },
      "ChangeDetection": {
        "type": "object",
        "required": ["id", "model", "config"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "model": {
            "type": "string"
          },
          "config": {
            "$ref": "#/components/schemas/ObjectNode",
            "type": "array",
            "oneOf": [
              {
                "$ref": "#/components/schemas/RelativeDifferenceDetectionConfig"
              },
              {
                "$ref": "#/components/schemas/FixedThresholdDetectionConfig"
              },
              {
                "$ref": "#/components/schemas/EDivisiveDetectionConfig"
              }
            ],
            "discriminator": {
              "propertyName": "model",
              "mapping": {
                "relativeDifference": "#/components/schemas/RelativeDifferenceDetectionConfig",
                "fixedThreshold": "#/components/schemas/FixedThresholdDetectionConfig",
                "eDivisive": "#/components/schemas/EDivisiveDetectionConfig"
              }
            }
          }
        }
      },
      "ChangeDetectionModelType": {
        "type": "string",
        "enum": ["FIXED_THRESHOLD", "RELATIVE_DIFFERENCE", "EDIVISIVE"],
        "description": "Type of Change Detection Model"
      },
      "ChangeDetectionUpdate": {
        "type": "object",
        "properties": {
          "timelineLabels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "timelineFunction": {
            "type": "string"
          },
          "fingerprintLabels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "fingerprintFilter": {
            "type": "string"
          }
        }
      },
      "CollectorApiDatastoreConfig": {
        "type": "object",
        "required": ["authentication", "builtIn", "url"],
        "description": "Type of backend datastore",
        "properties": {
          "authentication": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NoAuth"
              },
              {
                "$ref": "#/components/schemas/APIKeyAuth"
              },
              {
                "$ref": "#/components/schemas/UsernamePassAuth"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "none": "#/components/schemas/NoAuth",
                "api-key": "#/components/schemas/APIKeyAuth",
                "username": "#/components/schemas/UsernamePassAuth"
              }
            }
          },
          "builtIn": {
            "type": "boolean",
            "description": "Built In"
          },
          "url": {
            "type": "string",
            "description": "Collector url, e.g. https://collector.foci.life/api/v1/image-stats"
          }
        }
      },
      "ComparisonResult": {
        "type": "object",
        "description": "Result of performing a Comparison",
        "properties": {
          "overall": {
            "type": "string",
            "enum": ["BETTER", "SAME", "WORSE"],
            "description": "Was the Experiment dataset better or worse than the baseline dataset"
          },
          "experimentValue": {
            "type": "number",
            "format": "double",
            "description": "Experiment value"
          },
          "baselineValue": {
            "type": "number",
            "format": "double",
            "description": "Baseline value"
          },
          "result": {
            "type": "string",
            "description": "The relative difference between the Experiment and Baseline Datasets"
          }
        }
      },
      "ConditionComponent": {
        "type": "object",
        "required": ["name", "title", "description", "type", "properties"],
        "properties": {
          "name": {
            "type": "string",
            "examples": ["min"],
            "description": "Change detection model component name"
          },
          "title": {
            "type": "string",
            "examples": ["Minimum"],
            "description": "Change detection model component title"
          },
          "description": {
            "type": "string",
            "examples": ["Lower bound for acceptable datapoint values."],
            "description": "Change detection model component description"
          },
          "type": {
            "type": ["string", "object"],
            "enum": ["LOG_SLIDER", "ENUM", "NUMBER_BOUND", "SWITCH"],
            "examples": ["\"LOG_SLIDER\""],
            "description": "UI Component type"
          },
          "properties": {
            "type": "object",
            "examples": [""],
            "additionalProperties": {},
            "description": "Map of properties for component"
          }
        }
      },
      "ConditionConfig": {
        "type": "object",
        "required": ["name", "title", "description", "ui"],
        "description": "A configuration object for Change detection models",
        "properties": {
          "name": {
            "type": "string",
            "examples": ["fixedThreshold"],
            "description": "Name of Change detection model"
          },
          "title": {
            "type": "string",
            "examples": ["Fixed Threshold"],
            "description": "UI name for change detection model"
          },
          "description": {
            "type": "string",
            "examples": [
              "This model checks that the datapoint value is within fixed bounds."
            ],
            "description": "Change detection model description"
          },
          "ui": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConditionComponent"
            },
            "description": "A list of UI components for dynamically building the UI components"
          },
          "defaults": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/JsonNode"
            },
            "description": "A dictionary of UI default configuration items for dynamically building the UI components"
          }
        }
      },
      "DashboardInfo": {
        "type": "object",
        "required": ["testId", "uid", "url", "panels"],
        "properties": {
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "uid": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "panels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PanelInfo"
            }
          }
        }
      },
      "DatapointLastTimestamp": {
        "type": "object",
        "required": ["variable", "timestamp"],
        "properties": {
          "variable": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "type": "number"
          }
        }
      },
      "DatapointRecalculationStatus": {
        "type": "object",
        "required": ["percentage", "done", "datasetsWithoutValue"],
        "properties": {
          "percentage": {
            "type": "integer",
            "format": "int32"
          },
          "done": {
            "type": "boolean"
          },
          "totalDatasets": {
            "type": "integer",
            "format": "int32"
          },
          "errors": {
            "type": "integer",
            "format": "int32"
          },
          "datasetsWithoutValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetInfo"
            }
          }
        }
      },
      "Dataset": {
        "type": "object",
        "required": ["access", "owner", "start", "stop", "testid", "data", "ordinal"],
        "description": "A dataset is the JSON document used as the basis for all comparisons and reporting",
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "start": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Start timestamp"
          },
          "stop": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Stop timestamp"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Dataset Unique ID"
          },
          "description": {
            "type": "string",
            "examples": ["Run on AWS with m7g.large"],
            "description": "Run description"
          },
          "testid": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Test ID that Dataset relates to"
          },
          "data": {
            "$ref": "#/components/schemas/JsonNode",
            "type": "object",
            "description": "Data payload"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "examples": [1],
            "description": "Dataset ordinal for ordered list of Datasets derived from a Run"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of Validation Errors"
          },
          "runId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Run ID that Dataset relates to"
          }
        }
      },
      "DatasetInfo": {
        "type": "object",
        "required": ["id", "runId", "ordinal", "testId"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Dataset ID for Dataset"
          },
          "runId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Run ID that Dataset relates to"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "examples": [2],
            "description": "Ordinal position in ordered list"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [103],
            "description": "Test ID that Dataset relates to"
          }
        }
      },
      "DatasetList": {
        "type": "object",
        "required": ["total", "datasets"],
        "description": "Result containing a subset of Dataset Summaries and the total count of available. Used in paginated tables",
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64",
            "examples": [64],
            "description": "Total number of Dataset Summaries available"
          },
          "datasets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetSummary"
            },
            "description": "List of Dataset Summaries. This is often a subset of total available."
          }
        }
      },
      "DatasetLog": {
        "type": "object",
        "required": [
          "id",
          "level",
          "timestamp",
          "message",
          "source",
          "testId",
          "runId",
          "datasetId",
          "datasetOrdinal"
        ],
        "description": "Dataset Log",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Instant"
          },
          "message": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "runId": {
            "type": "integer",
            "format": "int32"
          },
          "datasetId": {
            "type": "integer",
            "format": "int32"
          },
          "datasetOrdinal": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DatasetSummary": {
        "type": "object",
        "required": [
          "access",
          "owner",
          "start",
          "stop",
          "id",
          "runId",
          "ordinal",
          "testId",
          "testname",
          "schemas"
        ],
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "start": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Start timestamp"
          },
          "stop": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Stop timestamp"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Dataset ID"
          },
          "runId": {
            "type": "integer",
            "format": "int32",
            "examples": [202],
            "description": "Run ID that Dataset relates to"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32",
            "examples": [3],
            "description": "Ordinal position of Dataset Summary on returned List"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [202],
            "description": "Test ID that Dataset relates to"
          },
          "testname": {
            "type": "string",
            "examples": ["my-comprehensive-benchmark"],
            "description": "Test name that the Dataset relates to"
          },
          "description": {
            "type": "string",
            "examples": ["Run on AWS with m7g.large"],
            "description": "Dataset description"
          },
          "view": {
            "$ref": "#/components/schemas/IndexedLabelValueMap",
            "type": "object",
            "examples": ["{ \"[view_component_id]\": { \"[labelName]\": labelValue} }"],
            "description": "map of view component ids to the LabelValueMap to render the component for this dataset"
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaUsage"
            },
            "description": "List of Schema usages"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "List of Validation Errors"
          }
        }
      },
      "Datastore": {
        "type": "object",
        "required": ["access", "owner", "id", "name", "config", "type"],
        "description": "Instance of backend datastore",
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Datastore id"
          },
          "name": {
            "type": "string",
            "examples": ["Perf Elasticsearch"],
            "description": "Name of the datastore, used to identify the datastore in the Test definition"
          },
          "config": {
            "$ref": "#/components/schemas/ObjectNode",
            "type": "array",
            "oneOf": [
              {
                "$ref": "#/components/schemas/CollectorApiDatastoreConfig"
              },
              {
                "$ref": "#/components/schemas/ElasticsearchDatastoreConfig"
              },
              {
                "$ref": "#/components/schemas/PostgresDatastoreConfig"
              }
            ]
          },
          "type": {
            "type": "string",
            "enum": ["POSTGRES", "ELASTICSEARCH", "COLLECTORAPI"],
            "examples": ["ELASTICSEARCH"],
            "description": "Type of backend datastore"
          }
        }
      },
      "DatastoreTestResponse": {
        "type": "object",
        "properties": {
          "msg": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        }
      },
      "DatastoreType": {
        "type": "string",
        "enum": ["POSTGRES", "ELASTICSEARCH", "COLLECTORAPI"],
        "examples": ["ELASTICSEARCH"],
        "description": "Type of backend datastore"
      },
      "EDivisiveDetectionConfig": {
        "type": "object",
        "required": ["builtIn", "model"],
        "properties": {
          "builtIn": {
            "type": "boolean",
            "description": "Built In"
          },
          "model": {
            "type": "string",
            "enum": ["eDivisive"]
          }
        }
      },
      "ElasticsearchDatastoreConfig": {
        "type": "object",
        "required": ["authentication", "builtIn", "url"],
        "description": "Type of backend datastore",
        "properties": {
          "authentication": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NoAuth"
              },
              {
                "$ref": "#/components/schemas/APIKeyAuth"
              },
              {
                "$ref": "#/components/schemas/UsernamePassAuth"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "none": "#/components/schemas/NoAuth",
                "api-key": "#/components/schemas/APIKeyAuth",
                "username": "#/components/schemas/UsernamePassAuth"
              }
            }
          },
          "builtIn": {
            "type": "boolean",
            "description": "Built In"
          },
          "url": {
            "type": "string",
            "description": "Elasticsearch url"
          }
        }
      },
      "ErrorDetails": {
        "type": "object",
        "required": ["type", "message"],
        "description": "Validation Error Details",
        "properties": {
          "type": {
            "type": "string",
            "description": "Validation Error type"
          },
          "code": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "evaluationPath": {
            "type": "string"
          },
          "schemaPath": {
            "type": "string",
            "deprecated": true
          },
          "schemaLocation": {
            "type": "string"
          },
          "instanceLocation": {
            "type": "string"
          },
          "property": {
            "type": "string"
          },
          "arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "details": {
            "type": "string"
          },
          "messageKey": {
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "ExperimentComparison": {
        "type": "object",
        "required": ["model", "config", "variableId"],
        "properties": {
          "model": {
            "type": "string",
            "examples": ["relativeDifference"],
            "description": "Name of comparison model"
          },
          "config": {
            "type": "string",
            "description": "Model JSON configuration"
          },
          "variableId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Variable ID to run experiment against"
          },
          "variableName": {
            "type": "string",
            "examples": ["Throughput"],
            "description": "Variable Name to run experiment against"
          }
        }
      },
      "ExperimentProfile": {
        "type": "object",
        "required": ["id", "name", "selectorLabels", "baselineLabels", "comparisons"],
        "description": "An Experiment Profile defines the labels and filters for the dataset and baseline",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Experiment Profile unique ID"
          },
          "name": {
            "type": "string",
            "examples": ["Techempower comparison"],
            "description": "Name of Experiment Profile"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Test ID that Experiment Profile relates to"
          },
          "selectorLabels": {
            "type": "array",
            "examples": [["Framework"]],
            "items": {
              "type": "string"
            },
            "description": "Array of selector labels"
          },
          "selectorFilter": {
            "type": "string",
            "examples": [
              "value => value === 'quarkus-resteasy-reactive-hibernate-reactive'"
            ],
            "description": "Selector filter to apply to Selector label values"
          },
          "baselineLabels": {
            "type": "array",
            "examples": [["timestamp"]],
            "items": {
              "type": "string"
            },
            "description": "Array of selector labels for comparison Baseline"
          },
          "baselineFilter": {
            "type": "string",
            "examples": ["value => value === 1666955225547"],
            "description": "Selector filter to apply to Baseline label values"
          },
          "comparisons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperimentComparison"
            },
            "description": "Collection of Experiment Comparisons to run during an Experiment evaluation"
          },
          "extraLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "These labels are not used by Horreum but are added to the result event and therefore can be used e.g. when firing an Action."
          }
        }
      },
      "ExperimentResult": {
        "type": "object",
        "description": "Result of running an Experiment",
        "properties": {
          "profile": {
            "$ref": "#/components/schemas/ExperimentProfile",
            "type": "object",
            "description": "Experiment profile that results relates to"
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetLog"
            },
            "description": "A list of log statements recorded while Experiment was evaluated"
          },
          "datasetInfo": {
            "$ref": "#/components/schemas/DatasetInfo",
            "type": "object",
            "description": "Dataset Info about dataset used for experiment"
          },
          "baseline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DatasetInfo"
            },
            "description": "A list of Dataset Info for experiment baseline(s)"
          },
          "results": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ComparisonResult"
            },
            "description": "A Map of all comparisons and results evaluated during an Experiment"
          },
          "extraLabels": {
            "type": "string"
          },
          "notify": {
            "type": "boolean"
          }
        }
      },
      "ExportedLabelValues": {
        "type": "object",
        "required": ["start", "stop"],
        "description": "A map of label names to label values with the associated datasetId and runId",
        "properties": {
          "values": {
            "$ref": "#/components/schemas/LabelValueMap"
          },
          "runId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "the run id that created the dataset"
          },
          "datasetId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "the unique dataset id"
          },
          "start": {
            "type": "string",
            "format": "date-time",
            "examples": ["2019-09-26T07:58:30.996+0200"],
            "description": "Start timestamp"
          },
          "stop": {
            "type": "string",
            "format": "date-time",
            "examples": ["2019-09-26T07:58:30.996+0200"],
            "description": "Stop timestamp"
          }
        }
      },
      "Extractor": {
        "type": "object",
        "required": ["name", "jsonpath", "isarray"],
        "description": "An Extractor defines how values are extracted from a JSON document, for use in Labels etc.",
        "properties": {
          "name": {
            "type": "string",
            "examples": ["buildID"],
            "description": "Name of extractor. This name is used in Combination Functions to refer to values by name"
          },
          "jsonpath": {
            "type": "string",
            "examples": ["$.buildInfo.buildID"],
            "description": "JSON path expression defining the location of the extractor value in the JSON document. This is a pSQL json path expression"
          },
          "isarray": {
            "type": "boolean",
            "examples": [false],
            "description": "Does the JSON path expression reference an Array?"
          }
        }
      },
      "FingerprintValue": {
        "type": "object",
        "description": "Representation of Fingerprint. If the Fingerprint has children the value will be null.",
        "properties": {
          "name": {
            "type": "string",
            "examples": ["Mode"],
            "description": "Fingerprint name"
          },
          "value": {
            "examples": ["Library"],
            "description": "Fingerprint name"
          },
          "children": {
            "type": "array",
            "items": {
              "description": "Cyclic reference to io.hyperfoil.tools.horreum.api.data.FingerprintValue"
            },
            "description": "List of Fingerprint children"
          }
        }
      },
      "Fingerprints": {
        "type": "object",
        "description": "A list of Fingerprints representing one dataset",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FingerprintValue"
            }
          }
        }
      },
      "FixThresholdConfig": {
        "type": "object",
        "required": ["value", "enabled", "inclusive"],
        "properties": {
          "value": {
            "type": "integer",
            "examples": [95],
            "description": "Threshold Value"
          },
          "enabled": {
            "type": "boolean",
            "examples": [true],
            "description": "Threshold enabled/disabled"
          },
          "inclusive": {
            "type": "boolean",
            "examples": [false],
            "description": "Is threshold inclusive of defined value?"
          }
        }
      },
      "FixedThresholdDetectionConfig": {
        "type": "object",
        "required": ["builtIn", "model", "min", "max"],
        "properties": {
          "builtIn": {
            "type": "boolean",
            "description": "Built In"
          },
          "model": {
            "type": "string",
            "enum": ["fixedThreshold"]
          },
          "min": {
            "$ref": "#/components/schemas/FixThresholdConfig",
            "type": "object",
            "description": "Lower bound for acceptable datapoint values"
          },
          "max": {
            "$ref": "#/components/schemas/FixThresholdConfig",
            "type": "object",
            "description": "Upper bound for acceptable datapoint values"
          }
        }
      },
      "GithubIssueCommentActionConfig": {
        "type": "object",
        "required": ["type", "issueUrl", "owner", "repo", "issue", "formatter"],
        "properties": {
          "type": {
            "type": "string",
            "description": "Action type"
          },
          "issueUrl": {
            "type": "string",
            "description": "GitHub issue URL"
          },
          "owner": {
            "type": "string",
            "description": "GitHub repo owner"
          },
          "repo": {
            "type": "string",
            "description": "GitHub repo name"
          },
          "issue": {
            "type": "string",
            "description": "GitHub issue number"
          },
          "formatter": {
            "type": "string",
            "description": "Object markdown formatter"
          }
        }
      },
      "GithubIssueCreateActionConfig": {
        "type": "object",
        "required": ["type", "owner", "repo", "title", "formatter"],
        "properties": {
          "type": {
            "type": "string",
            "description": "Action type"
          },
          "owner": {
            "type": "string",
            "description": "GitHub repo owner"
          },
          "repo": {
            "type": "string",
            "description": "GitHub repo name"
          },
          "title": {
            "type": "string",
            "description": "GitHub issue title"
          },
          "formatter": {
            "type": "string",
            "description": "Object markdown formatter"
          }
        }
      },
      "HttpActionConfig": {
        "type": "object",
        "required": ["type", "url"],
        "properties": {
          "type": {
            "type": "string",
            "description": "Action type"
          },
          "url": {
            "type": "string",
            "description": "HTTP address"
          }
        }
      },
      "IndexedLabelValueMap": {
        "type": "object",
        "additionalProperties": {
          "$ref": "#/components/schemas/LabelValueMap"
        }
      },
      "Instant": {
        "type": "string",
        "format": "date-time",
        "examples": ["2022-03-10T16:15:50.000Z"]
      },
      "JsonNode": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "valueNode": {
            "type": "boolean"
          },
          "containerNode": {
            "type": "boolean"
          },
          "missingNode": {
            "type": "boolean"
          },
          "array": {
            "type": "boolean"
          },
          "object": {
            "type": "boolean"
          },
          "nodeType": {
            "$ref": "#/components/schemas/JsonNodeType"
          },
          "pojo": {
            "type": "boolean"
          },
          "number": {
            "type": "boolean"
          },
          "integralNumber": {
            "type": "boolean"
          },
          "floatingPointNumber": {
            "type": "boolean"
          },
          "short": {
            "type": "boolean"
          },
          "int": {
            "type": "boolean"
          },
          "long": {
            "type": "boolean"
          },
          "float": {
            "type": "boolean"
          },
          "double": {
            "type": "boolean"
          },
          "bigDecimal": {
            "type": "boolean"
          },
          "bigInteger": {
            "type": "boolean"
          },
          "textual": {
            "type": "boolean"
          },
          "boolean": {
            "type": "boolean"
          },
          "null": {
            "type": "boolean"
          },
          "binary": {
            "type": "boolean"
          }
        }
      },
      "JsonNodeType": {
        "type": "string",
        "enum": [
          "ARRAY",
          "BINARY",
          "BOOLEAN",
          "MISSING",
          "NULL",
          "NUMBER",
          "OBJECT",
          "POJO",
          "STRING"
        ]
      },
      "JsonpathValidation": {
        "type": "object",
        "required": ["valid"],
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "jsonpath": {
            "type": "string"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "sqlState": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "sql": {
            "type": "string"
          }
        }
      },
      "KeyType": {
        "type": "string",
        "enum": ["USER"]
      },
      "KeycloakConfig": {
        "type": "object",
        "properties": {
          "realm": {
            "type": "string",
            "examples": ["horreum"],
            "description": "Keycloak realm securing Horreum instance"
          },
          "url": {
            "type": "string",
            "examples": ["https://horreum-keycloak.example.com"],
            "description": "URL of Keycloak instance securing Horreum"
          },
          "clientId": {
            "type": "string",
            "examples": ["horreum-ui"],
            "description": "Keycloak client ID in Horreum realm for User Interface"
          }
        }
      },
      "Label": {
        "type": "object",
        "required": [
          "access",
          "owner",
          "id",
          "name",
          "extractors",
          "filtering",
          "metrics",
          "schemaId"
        ],
        "description": "A Label is a core component of Horreum, defining which components of the JSON document are part of a KPI and how the metric values are calculated",
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique ID for Label"
          },
          "name": {
            "type": "string",
            "examples": ["Throughput"],
            "description": "Name for label. NOTE: all Labels are considered to have the same semantic meaning throughout the entire system"
          },
          "extractors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extractor"
            },
            "description": "A collection of Extractors, that will be combined in the Combination Function"
          },
          "function": {
            "type": "string",
            "examples": [
              "value => { return ((value.reduce((a,b) => a+b))/value.length*1000).toFixed(3); }"
            ],
            "description": "A Combination Function that defines how values from Extractors are combined to produce a Label Value"
          },
          "filtering": {
            "type": "boolean",
            "examples": [true],
            "description": "Is Label a filtering label? Filtering labels contains values that are used to filter datasets for comparison"
          },
          "metrics": {
            "type": "boolean",
            "examples": [true],
            "description": "Is Label a metrics label? Metrics labels are contain Metrics that are used for comparison"
          },
          "schemaId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Schema ID that the Label relates to"
          }
        }
      },
      "LabelInFingerprint": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "examples": ["VIEW"],
            "description": "Location of Label usage"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique ID for location that references Schema"
          },
          "testName": {
            "type": "string",
            "examples": ["My Benchmark"],
            "description": "Test name that references Schema"
          }
        }
      },
      "LabelInReport": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "examples": ["VIEW"],
            "description": "Location of Label usage"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique ID for location that references Schema"
          },
          "testName": {
            "type": "string",
            "examples": ["My Benchmark"],
            "description": "Test name that references Schema"
          },
          "configId": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "where": {
            "type": "string"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "LabelInRule": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "examples": ["VIEW"],
            "description": "Location of Label usage"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique ID for location that references Schema"
          },
          "testName": {
            "type": "string",
            "examples": ["My Benchmark"],
            "description": "Test name that references Schema"
          },
          "ruleId": {
            "type": "integer",
            "format": "int32"
          },
          "ruleName": {
            "type": "string"
          }
        }
      },
      "LabelInVariable": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "examples": ["VIEW"],
            "description": "Location of Label usage"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique ID for location that references Schema"
          },
          "testName": {
            "type": "string",
            "examples": ["My Benchmark"],
            "description": "Test name that references Schema"
          },
          "variableId": {
            "type": "integer",
            "format": "int32"
          },
          "variableName": {
            "type": "string"
          }
        }
      },
      "LabelInView": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "examples": ["VIEW"],
            "description": "Location of Label usage"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique ID for location that references Schema"
          },
          "testName": {
            "type": "string",
            "examples": ["My Benchmark"],
            "description": "Test name that references Schema"
          },
          "viewId": {
            "type": "integer",
            "format": "int32"
          },
          "viewName": {
            "type": "string"
          },
          "componentId": {
            "type": "integer",
            "format": "int32"
          },
          "header": {
            "type": "string"
          }
        }
      },
      "LabelInfo": {
        "type": "object",
        "required": ["name", "metrics", "filtering", "schemas"],
        "properties": {
          "name": {
            "type": "string",
            "examples": ["buildID"],
            "description": "Label name"
          },
          "metrics": {
            "type": "boolean",
            "examples": [true],
            "description": "Is label a metrics label?"
          },
          "filtering": {
            "type": "boolean",
            "examples": [false],
            "description": "Is label a filtering label?"
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaDescriptor"
            },
            "description": "List of schemas where label is referenced"
          }
        }
      },
      "LabelLocation": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "examples": ["VIEW"],
            "description": "Location of Label usage"
          },
          "testId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique ID for location that references Schema"
          },
          "testName": {
            "type": "string",
            "examples": ["My Benchmark"],
            "description": "Test name that references Schema"
          }
        }
      },
      "LabelPreview": {
        "type": "object",
        "description": "Preview a Label Value derived from a Dataset Data. A preview allows users to apply a Label to a dataset and preview the Label Value result and processing errors in the UI",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value value extracted from Dataset. This can be a scalar, array or JSON object"
          },
          "output": {
            "type": "string",
            "description": "Description of errors occurred attempting to generate Label Value Preview"
          }
        }
      },
      "LabelValue": {
        "type": "object",
        "required": ["id", "name", "schema"],
        "description": "Label Value derived from Label definition and Dataset Data",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique ID for Label Value"
          },
          "name": {
            "type": "string",
            "examples": ["buildID"],
            "description": "Label name"
          },
          "schema": {
            "$ref": "#/components/schemas/SchemaDescriptor",
            "type": "object",
            "description": "Summary description of Schema"
          },
          "value": {
            "type": "string",
            "examples": ["1724"],
            "description": "Value value extracted from Dataset. This can be a scalar, array or JSON object"
          }
        }
      },
      "LabelValueMap": {
        "type": "object",
        "examples": ["{ \"[labelName]\": labelValue}"],
        "description": "a map of label name to value"
      },
      "LastDatapointsParams": {
        "type": "object",
        "required": ["variables", "fingerprint"],
        "properties": {
          "variables": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          "fingerprint": {
            "type": "string"
          }
        }
      },
      "MissingDataRule": {
        "type": "object",
        "required": ["id", "maxStaleness", "testId"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "condition": {
            "type": "string"
          },
          "maxStaleness": {
            "type": "integer",
            "format": "int64"
          },
          "lastNotification": {
            "$ref": "#/components/schemas/Instant"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "NoAuth": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type"
          }
        }
      },
      "NotificationSettings": {
        "type": "object",
        "required": ["name", "isTeam", "method", "disabled"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "isTeam": {
            "type": "boolean"
          },
          "method": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "disabled": {
            "type": "boolean"
          }
        }
      },
      "ObjectNode": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonNode"
        }
      },
      "PanelInfo": {
        "type": "object",
        "required": ["name", "variables"],
        "properties": {
          "name": {
            "type": "string"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variable"
            }
          }
        }
      },
      "PersistentLog": {
        "type": "object",
        "required": ["id", "level", "timestamp", "message"],
        "description": "Persistent Log",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Instant"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "PostgresDatastoreConfig": {
        "type": "object",
        "required": ["authentication", "builtIn"],
        "description": "Built in backend datastore",
        "properties": {
          "authentication": {
            "type": "object",
            "oneOf": [
              {
                "$ref": "#/components/schemas/NoAuth"
              },
              {
                "$ref": "#/components/schemas/APIKeyAuth"
              },
              {
                "$ref": "#/components/schemas/UsernamePassAuth"
              }
            ],
            "discriminator": {
              "propertyName": "type",
              "mapping": {
                "none": "#/components/schemas/NoAuth",
                "api-key": "#/components/schemas/APIKeyAuth",
                "username": "#/components/schemas/UsernamePassAuth"
              }
            }
          },
          "builtIn": {
            "type": "boolean",
            "description": "Built In"
          }
        }
      },
      "ProtectedTimeType": {
        "type": "object",
        "required": ["access", "owner", "start", "stop"],
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "start": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Start timestamp"
          },
          "stop": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Stop timestamp"
          }
        }
      },
      "ProtectedType": {
        "type": "object",
        "required": ["access", "owner"],
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          }
        }
      },
      "Query": {
        "type": "object",
        "required": ["range", "targets"],
        "properties": {
          "range": {
            "$ref": "#/components/schemas/Range"
          },
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Target"
            }
          }
        }
      },
      "QueryResult": {
        "type": "object",
        "required": ["valid"],
        "properties": {
          "valid": {
            "type": "boolean"
          },
          "jsonpath": {
            "type": "string"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "sqlState": {
            "type": "string"
          },
          "reason": {
            "type": "string"
          },
          "sql": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "Range": {
        "type": "object",
        "required": ["from", "to"],
        "properties": {
          "from": {
            "$ref": "#/components/schemas/Instant"
          },
          "to": {
            "$ref": "#/components/schemas/Instant"
          },
          "oneBeforeAndAfter": {
            "type": "boolean"
          }
        }
      },
      "RecalculationStatus": {
        "type": "object",
        "required": ["timestamp", "totalRuns", "finished", "datasets"],
        "properties": {
          "timestamp": {
            "type": "integer",
            "format": "int64",
            "examples": [1698013206000],
            "description": "Recalculation timestamp"
          },
          "totalRuns": {
            "type": "integer",
            "format": "int64",
            "examples": [152],
            "description": "Total number of Runs being recalculated"
          },
          "finished": {
            "type": "integer",
            "format": "int64",
            "examples": [93],
            "description": "Total number of completed recalculations"
          },
          "datasets": {
            "type": "integer",
            "format": "int64",
            "examples": [186],
            "description": "Total number of generated datasets"
          }
        }
      },
      "RelativeDifferenceDetectionConfig": {
        "type": "object",
        "required": [
          "builtIn",
          "model",
          "filter",
          "window",
          "threshold",
          "minPrevious"
        ],
        "properties": {
          "builtIn": {
            "type": "boolean",
            "description": "Built In"
          },
          "model": {
            "type": "string",
            "enum": ["relativeDifference"]
          },
          "filter": {
            "type": "string",
            "examples": ["mean"],
            "description": "Relative Difference Detection filter"
          },
          "window": {
            "type": "integer",
            "format": "int32",
            "examples": [5],
            "description": "Number of most recent datapoints used for aggregating the value for comparison."
          },
          "threshold": {
            "type": "number",
            "format": "double",
            "examples": [0.2],
            "description": "Maximum difference between the aggregated value of last <window> datapoints and the mean of preceding values."
          },
          "minPrevious": {
            "type": "integer",
            "format": "int32",
            "examples": [5],
            "description": "Minimal number of preceding datapoints"
          }
        }
      },
      "ReportComment": {
        "type": "object",
        "required": ["level", "comment"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "category": {
            "type": "string"
          },
          "componentId": {
            "type": "integer",
            "format": "int32"
          },
          "comment": {
            "type": "string"
          }
        }
      },
      "ReportComponent": {
        "type": "object",
        "required": ["name", "order", "labels"],
        "description": "Report Component",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "labels": {
            "type": "array",
            "examples": [["Framework"]],
            "items": {
              "type": "string"
            },
            "description": "Array of labels"
          },
          "function": {
            "type": "string"
          },
          "unit": {
            "type": "string"
          },
          "reportId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "ReportLog": {
        "type": "object",
        "required": ["id", "level", "timestamp", "message", "reportId"],
        "description": "Report Log",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Instant"
          },
          "message": {
            "type": "string"
          },
          "reportId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Run": {
        "type": "object",
        "required": [
          "access",
          "owner",
          "start",
          "stop",
          "id",
          "testid",
          "data",
          "trashed"
        ],
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "start": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Start timestamp"
          },
          "stop": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Stop timestamp"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Run ID"
          },
          "description": {
            "type": "string",
            "examples": ["Run on AWS with m7g.large"],
            "description": "Run description"
          },
          "testid": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Test ID run relates to"
          },
          "data": {
            "$ref": "#/components/schemas/JsonNode",
            "type": "object",
            "description": "Run result payload"
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonNode",
            "type": "object",
            "description": "JSON metadata related to run, can be tool configuration etc"
          },
          "trashed": {
            "type": "boolean",
            "examples": [false],
            "description": "Has Run been deleted from UI"
          },
          "datasets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Dataset"
            },
            "description": "Collection of Datasets derived from Run payload"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "Collection of Validation Errors in Run payload"
          }
        }
      },
      "RunCount": {
        "type": "object",
        "required": ["total", "active", "trashed"],
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64",
            "examples": [100],
            "description": "Total count of Runs visible"
          },
          "active": {
            "type": "integer",
            "format": "int64",
            "examples": [95],
            "description": "Total count of active Runs visible"
          },
          "trashed": {
            "type": "integer",
            "format": "int64",
            "examples": [5],
            "description": "Total count of trashed Runs"
          }
        }
      },
      "RunExpectation": {
        "type": "object",
        "required": ["testId", "expectedBefore"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "expectedBefore": {
            "$ref": "#/components/schemas/Instant"
          },
          "expectedBy": {
            "type": "string"
          },
          "backlink": {
            "type": "string"
          }
        }
      },
      "RunExtended": {
        "type": "object",
        "required": [
          "access",
          "owner",
          "start",
          "stop",
          "id",
          "testid",
          "data",
          "trashed",
          "schemas",
          "testname",
          "datasets"
        ],
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "start": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Start timestamp"
          },
          "stop": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Stop timestamp"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Run ID"
          },
          "description": {
            "type": "string",
            "examples": ["Run on AWS with m7g.large"],
            "description": "Run description"
          },
          "testid": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Test ID run relates to"
          },
          "data": {
            "$ref": "#/components/schemas/JsonNode",
            "type": "object",
            "description": "Run result payload"
          },
          "metadata": {
            "$ref": "#/components/schemas/JsonNode",
            "type": "object",
            "description": "JSON metadata related to run, can be tool configuration etc"
          },
          "trashed": {
            "type": "boolean",
            "examples": [false],
            "description": "Has Run been deleted from UI"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "Collection of Validation Errors in Run payload"
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaUsage"
            },
            "description": "List of Schema Usages"
          },
          "testname": {
            "type": "string",
            "examples": ["My benchmark"],
            "description": "Test name run references"
          },
          "datasets": {
            "type": "array",
            "examples": [[101, 102, 104, 106]],
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "List of DatasetIDs"
          }
        }
      },
      "RunSummary": {
        "type": "object",
        "required": [
          "access",
          "owner",
          "start",
          "stop",
          "id",
          "testid",
          "testname",
          "trashed",
          "hasMetadata",
          "datasets"
        ],
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "start": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Start timestamp"
          },
          "stop": {
            "type": ["string", "integer"],
            "format": "int64",
            "examples": [1704965908267],
            "description": "Run Stop timestamp"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [202],
            "description": "Run unique ID"
          },
          "testid": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "test ID run relates to"
          },
          "testname": {
            "type": "string",
            "examples": ["My benchmark"],
            "description": "test ID run relates to"
          },
          "trashed": {
            "type": "boolean",
            "examples": [false],
            "description": "has Run been trashed in the UI"
          },
          "hasMetadata": {
            "type": "boolean",
            "examples": [false],
            "description": "does Run have metadata uploaded alongside Run data"
          },
          "description": {
            "type": "string",
            "examples": ["Run on AWS with m7g.large"],
            "description": "Run description"
          },
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SchemaUsage"
            },
            "description": "List of all Schema Usages for Run"
          },
          "datasets": {
            "type": "array",
            "examples": [[101, 102, 103]],
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "description": "Array of datasets ids"
          },
          "validationErrors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "description": "Array of validation errors"
          }
        }
      },
      "RunsSummary": {
        "type": "object",
        "required": ["total", "runs"],
        "properties": {
          "total": {
            "type": "integer",
            "format": "int64",
            "examples": [1],
            "description": "Total count of Runs visible"
          },
          "runs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RunSummary"
            },
            "description": "List of Run Summaries"
          }
        }
      },
      "Schema": {
        "type": "object",
        "required": ["access", "owner", "id", "uri", "name"],
        "description": "Data object that describes the schema definition for a test",
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Schema ID"
          },
          "uri": {
            "type": "string",
            "examples": ["uri:my-schema:0.1"],
            "description": "Unique, versioned schema URI"
          },
          "name": {
            "type": "string",
            "examples": ["My benchmark schema"],
            "description": "Schema name"
          },
          "description": {
            "type": "string",
            "examples": ["Schema for processing my benchmark"],
            "description": "Schema Description"
          },
          "schema": {
            "type": "string",
            "examples": [
              "{  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",  \"$id\": \"https://example.com/product.schema.json\",  \"title\": \"Product\",  \"description\": \"A product in the catalog\",  \"type\": \"object\"}"
            ],
            "description": "JSON validation schema. Used to validate uploaded JSON documents"
          }
        }
      },
      "SchemaDescriptor": {
        "type": "object",
        "required": ["id", "name", "uri"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [1],
            "description": "Schema unique ID"
          },
          "name": {
            "type": "string",
            "examples": ["my-benchmark-schema"],
            "description": "Schema name"
          },
          "uri": {
            "type": "string",
            "examples": ["uri:my-schmea:0.1"],
            "description": "Schema name"
          }
        }
      },
      "SchemaExport": {
        "type": "object",
        "required": ["access", "owner", "id", "uri", "name"],
        "description": "Represents a Schema with all associated data used for export/import operations.",
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Schema ID"
          },
          "uri": {
            "type": "string",
            "examples": ["uri:my-schema:0.1"],
            "description": "Unique, versioned schema URI"
          },
          "name": {
            "type": "string",
            "examples": ["My benchmark schema"],
            "description": "Schema name"
          },
          "description": {
            "type": "string",
            "examples": ["Schema for processing my benchmark"],
            "description": "Schema Description"
          },
          "schema": {
            "type": "string",
            "examples": [
              "{  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",  \"$id\": \"https://example.com/product.schema.json\",  \"title\": \"Product\",  \"description\": \"A product in the catalog\",  \"type\": \"object\"}"
            ],
            "description": "JSON validation schema. Used to validate uploaded JSON documents"
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Label"
            },
            "description": "Array of Labels associated with schema"
          },
          "transformers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transformer"
            },
            "description": "Array of Transformers associated with schema"
          }
        }
      },
      "SchemaQueryResult": {
        "type": "object",
        "required": ["schemas", "count"],
        "properties": {
          "schemas": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Schema"
            },
            "description": "Array of Schemas"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "examples": [64],
            "description": "Count of available Schemas. This is a count of Schemas that the current user has access to"
          }
        }
      },
      "SchemaUsage": {
        "type": "object",
        "required": ["id", "name", "uri", "source", "type", "hasJsonSchema"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [1],
            "description": "Schema unique ID"
          },
          "name": {
            "type": "string",
            "examples": ["my-benchmark-schema"],
            "description": "Schema name"
          },
          "uri": {
            "type": "string",
            "examples": ["uri:my-schmea:0.1"],
            "description": "Schema name"
          },
          "source": {
            "type": "integer",
            "format": "int32",
            "examples": [1],
            "description": "Source of schema usage, 0 is data, 1 is metadata. DataSets always use 0"
          },
          "type": {
            "type": "integer",
            "format": "int32",
            "examples": [1],
            "description": "Location of Schema Usage, 0 for Run, 1 for Dataset"
          },
          "key": {
            "type": "string",
            "examples": ["1"],
            "description": "Ordinal position of schema usage in Run/Dataset"
          },
          "hasJsonSchema": {
            "type": "boolean",
            "examples": [false],
            "description": "Does schema have a JSON validation schema defined?"
          }
        }
      },
      "SlackChannelMessageActionConfig": {
        "type": "object",
        "required": ["type", "channel", "formatter"],
        "properties": {
          "type": {
            "type": "string",
            "description": "Action type"
          },
          "channel": {
            "type": "string",
            "description": "Slack channel"
          },
          "formatter": {
            "type": "string",
            "description": "Object markdown formatter"
          }
        }
      },
      "SortDirection": {
        "type": "string",
        "enum": ["Ascending", "Descending"]
      },
      "TableReport": {
        "type": "object",
        "required": ["id", "config", "created", "comments", "data", "logs"],
        "description": "Table Report",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "config": {
            "$ref": "#/components/schemas/TableReportConfig",
            "type": "object",
            "description": "Table Report Config"
          },
          "created": {
            "type": "string",
            "format": "date-time",
            "examples": ["2019-09-26T07:58:30.996+0200"],
            "description": "Created timestamp"
          },
          "comments": {
            "type": "array",
            "items": {
              "type": "object",
              "required": ["level", "comment"],
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32"
                },
                "level": {
                  "type": "integer",
                  "format": "int32"
                },
                "category": {
                  "type": "string"
                },
                "componentId": {
                  "type": "integer",
                  "format": "int32"
                },
                "comment": {
                  "type": "string"
                }
              }
            },
            "description": "List of ReportComments"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableReportData"
            },
            "description": "List of TableReportData"
          },
          "logs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportLog"
            },
            "description": "List of ReportLogs"
          }
        }
      },
      "TableReportConfig": {
        "type": "object",
        "required": ["id", "title", "seriesLabels", "components"],
        "description": "Table Report Config",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string"
          },
          "test": {
            "$ref": "#/components/schemas/Test"
          },
          "filterLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ArrayNode of filter labels"
          },
          "filterFunction": {
            "type": "string"
          },
          "categoryLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ArrayNode of category labels"
          },
          "categoryFunction": {
            "type": "string"
          },
          "categoryFormatter": {
            "type": "string"
          },
          "seriesLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ArrayNode of series labels"
          },
          "seriesFunction": {
            "type": "string"
          },
          "seriesFormatter": {
            "type": "string"
          },
          "scaleLabels": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "ArrayNode of filter labels"
          },
          "scaleFunction": {
            "type": "string"
          },
          "scaleFormatter": {
            "type": "string"
          },
          "scaleDescription": {
            "type": "string"
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReportComponent"
            },
            "description": "List of ReportComponents"
          }
        }
      },
      "TableReportData": {
        "type": "object",
        "required": [
          "datasetId",
          "runId",
          "ordinal",
          "category",
          "series",
          "scale",
          "values"
        ],
        "description": "Table Report Data",
        "properties": {
          "datasetId": {
            "type": "integer",
            "format": "int32"
          },
          "runId": {
            "type": "integer",
            "format": "int32"
          },
          "ordinal": {
            "type": "integer",
            "format": "int32"
          },
          "category": {
            "type": "string"
          },
          "series": {
            "type": "string"
          },
          "scale": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "number"
            },
            "description": "Array of values"
          }
        }
      },
      "TableReportSummary": {
        "type": "object",
        "required": ["configId", "testId", "testName", "title", "reports"],
        "properties": {
          "configId": {
            "type": "integer",
            "format": "int32"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "testName": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "reports": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TableReportSummaryItem"
            }
          }
        }
      },
      "TableReportSummaryItem": {
        "type": "object",
        "required": ["id", "configId", "created"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "configId": {
            "type": "integer",
            "format": "int32"
          },
          "created": {
            "$ref": "#/components/schemas/Instant"
          }
        }
      },
      "Target": {
        "type": "object",
        "description": "Change's target",
        "properties": {
          "target": {
            "type": "string",
            "description": "concatenated simicolons varibleID;{fingeprintJson}"
          },
          "type": {
            "type": "string"
          },
          "refId": {
            "type": "string"
          },
          "data": {
            "type": "string"
          },
          "payload": {
            "$ref": "#/components/schemas/ObjectNode"
          }
        }
      },
      "Test": {
        "type": "object",
        "required": [
          "access",
          "owner",
          "id",
          "name",
          "datastoreId",
          "notificationsEnabled"
        ],
        "description": "Represents a Test. Tests are typically equivalent to a particular benchmark",
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Test id"
          },
          "name": {
            "type": "string",
            "examples": ["my-comprehensive-benchmark"],
            "description": "Test name"
          },
          "folder": {
            "type": "string",
            "examples": ["My Team Folder"],
            "description": "Name of folder that the test is stored in. Folders allow tests to be organised in the UI"
          },
          "description": {
            "type": "string",
            "examples": [
              "Comprehensive benchmark to tests the limits of any system it is run against"
            ],
            "description": "Description of the test"
          },
          "datastoreId": {
            "type": "integer",
            "format": "int32",
            "description": "backend ID for backing datastore"
          },
          "timelineLabels": {
            "type": "array",
            "examples": [["timestamp"]],
            "items": {
              "type": "string"
            },
            "description": "List of label names that are used for determining metric to use as the time series"
          },
          "timelineFunction": {
            "type": "string",
            "examples": ["timestamp => timestamp"],
            "description": "Label function to modify timeline labels to a produce a value used for ordering datapoints"
          },
          "fingerprintLabels": {
            "type": "array",
            "examples": [["build_tag"]],
            "items": {
              "type": "string"
            },
            "description": "Array of Label names that are used to create a fingerprint "
          },
          "fingerprintFilter": {
            "type": "string",
            "examples": ["value => value === \"true\""],
            "description": "Filter function to filter out datasets that are comparable for the purpose of change detection"
          },
          "compareUrl": {
            "type": "string",
            "examples": [
              "(ids, token) => 'http://repoting.example.com/report/specj?q=' + ids.join('&q=') + \"&token=\"+token"
            ],
            "description": "URL to external service that can be called to compare runs.  This is typically an external reporting/visulization service"
          },
          "transformers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transformer"
            },
            "description": "Array for transformers defined for the Test"
          },
          "notificationsEnabled": {
            "type": "boolean",
            "examples": [true],
            "description": "Are notifications enabled for the test"
          }
        }
      },
      "TestExport": {
        "type": "object",
        "required": [
          "access",
          "owner",
          "id",
          "name",
          "datastoreId",
          "notificationsEnabled"
        ],
        "description": "Represents a Test with all associated data used for export/import operations.",
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Test id"
          },
          "name": {
            "type": "string",
            "examples": ["my-comprehensive-benchmark"],
            "description": "Test name"
          },
          "folder": {
            "type": "string",
            "examples": ["My Team Folder"],
            "description": "Name of folder that the test is stored in. Folders allow tests to be organised in the UI"
          },
          "description": {
            "type": "string",
            "examples": [
              "Comprehensive benchmark to tests the limits of any system it is run against"
            ],
            "description": "Description of the test"
          },
          "datastoreId": {
            "type": "integer",
            "format": "int32",
            "description": "backend ID for backing datastore"
          },
          "timelineLabels": {
            "type": "array",
            "examples": [["timestamp"]],
            "items": {
              "type": "string"
            },
            "description": "List of label names that are used for determining metric to use as the time series"
          },
          "timelineFunction": {
            "type": "string",
            "examples": ["timestamp => timestamp"],
            "description": "Label function to modify timeline labels to a produce a value used for ordering datapoints"
          },
          "fingerprintLabels": {
            "type": "array",
            "examples": [["build_tag"]],
            "items": {
              "type": "string"
            },
            "description": "Array of Label names that are used to create a fingerprint "
          },
          "fingerprintFilter": {
            "type": "string",
            "examples": ["value => value === \"true\""],
            "description": "Filter function to filter out datasets that are comparable for the purpose of change detection"
          },
          "compareUrl": {
            "type": "string",
            "examples": [
              "(ids, token) => 'http://repoting.example.com/report/specj?q=' + ids.join('&q=') + \"&token=\"+token"
            ],
            "description": "URL to external service that can be called to compare runs.  This is typically an external reporting/visulization service"
          },
          "transformers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transformer"
            },
            "description": "Array for transformers defined for the Test"
          },
          "notificationsEnabled": {
            "type": "boolean",
            "examples": [true],
            "description": "Are notifications enabled for the test"
          },
          "variables": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Variable"
            },
            "description": "Array of Variables associated with test"
          },
          "missingDataRules": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MissingDataRule"
            },
            "description": "Array of MissingDataRules associated with test"
          },
          "experiments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExperimentProfile"
            },
            "description": "Array of ExperimentProfiles associated with test"
          },
          "actions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Action"
            },
            "description": "Array of Actions associated with test"
          },
          "subscriptions": {
            "$ref": "#/components/schemas/Watch",
            "type": "object",
            "description": "Watcher object associated with test"
          },
          "datastore": {
            "$ref": "#/components/schemas/Datastore",
            "type": "object",
            "description": "Datastore associated with test"
          }
        }
      },
      "TestListing": {
        "type": "object",
        "required": ["tests", "count"],
        "properties": {
          "tests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestSummary"
            },
            "description": "Array of Test Summaries"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "description": "Number of tests when pagination is ignored"
          }
        }
      },
      "TestQueryResult": {
        "type": "object",
        "required": ["tests", "count"],
        "properties": {
          "tests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Test"
            },
            "description": "Array of Tests"
          },
          "count": {
            "type": "integer",
            "format": "int64",
            "examples": [64],
            "description": "Count of available tests. This is a count of tests that the current user has access to"
          }
        }
      },
      "TestSummary": {
        "type": "object",
        "required": ["access", "owner", "id", "name", "datastoreId"],
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "ID of tests"
          },
          "name": {
            "type": "string",
            "examples": ["my-comprehensive-benchmark"],
            "description": "Test name"
          },
          "folder": {
            "type": "string",
            "examples": ["My Team Folder"],
            "description": "Name of folder that the test is stored in. Folders allow tests to be organised in the UI"
          },
          "description": {
            "type": "string",
            "examples": [
              "Comprehensive benchmark to tests the limits of any system it is run against"
            ],
            "description": "Description of the test"
          },
          "datasets": {
            "type": "number",
            "examples": [202],
            "description": "Total number of Datasets for the Test"
          },
          "runs": {
            "type": "number",
            "examples": [101],
            "description": "Total number of Runs for the Test"
          },
          "watching": {
            "type": "array",
            "examples": [[]],
            "uniqueItems": true,
            "items": {
              "type": "string"
            },
            "description": "Subscriptions for each test for authenticated user"
          },
          "datastoreId": {
            "type": "integer",
            "format": "int32",
            "examples": [1],
            "description": "Datastore id"
          }
        }
      },
      "TimeseriesTarget": {
        "type": "object",
        "required": ["target", "datapoints", "variableId"],
        "properties": {
          "target": {
            "type": "string"
          },
          "datapoints": {
            "type": "array",
            "items": {
              "type": "array",
              "items": {
                "type": "number"
              }
            }
          },
          "variableId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "TransformationLog": {
        "type": "object",
        "required": ["id", "level", "timestamp", "message"],
        "description": "Transformation Log",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "level": {
            "type": "integer",
            "format": "int32"
          },
          "timestamp": {
            "$ref": "#/components/schemas/Instant"
          },
          "message": {
            "type": "string"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "runId": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Transformer": {
        "type": "object",
        "required": [
          "access",
          "owner",
          "id",
          "name",
          "extractors",
          "schemaId",
          "schemaUri",
          "schemaName"
        ],
        "description": "A transformer extracts labals and applies a Function to convert a Run into one or more Datasets",
        "properties": {
          "access": {
            "type": "string",
            "enum": ["PUBLIC", "PROTECTED", "PRIVATE"],
            "examples": ["PUBLIC"],
            "description": "Access rights for the test. This defines the visibility of the Test in the UI"
          },
          "owner": {
            "type": "string",
            "examples": ["performance-team"],
            "description": "Name of the team that owns the test. Users must belong to the team that owns a test to make modifications"
          },
          "id": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Unique Transformer id"
          },
          "name": {
            "type": "string",
            "examples": ["normalize-techempower-result"],
            "description": "Transformer name"
          },
          "description": {
            "type": "string",
            "examples": [
              "Normalizers a techempower output file to separate each framework into a dataset and normalize the JSON structure"
            ],
            "description": "Transformer description"
          },
          "targetSchemaUri": {
            "type": "string",
            "examples": ["uri:normalized-techempower:0.1"],
            "description": "The schema associated with the calculated Datasets. Where a transformer creates a new JSON object with a new structure, this Schema is used to extafct values from the new Dataset JSON document"
          },
          "extractors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Extractor"
            },
            "description": "A collection of extractors to extract JSON values to create new Dataset JSON document"
          },
          "function": {
            "type": "string"
          },
          "schemaId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Schema ID that the transform is registered against"
          },
          "schemaUri": {
            "type": "string",
            "examples": ["urn:techempower:0.1"],
            "description": "Schema Uri that the transform is registered against"
          },
          "schemaName": {
            "type": "string",
            "examples": ["techempower"],
            "description": "Schema name that the transform is registered against"
          }
        }
      },
      "TransformerInfo": {
        "type": "object",
        "required": [
          "schemaId",
          "schemaUri",
          "schemaName",
          "transformerId",
          "transformerName"
        ],
        "properties": {
          "schemaId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Schema ID"
          },
          "schemaUri": {
            "type": "string",
            "examples": ["uri:my-schema:0.1"],
            "description": "Schema uri"
          },
          "schemaName": {
            "type": "string",
            "examples": ["my-benchmark-schema"],
            "description": "Schema name"
          },
          "transformerId": {
            "type": "integer",
            "format": "int32",
            "examples": [201],
            "description": "Transformer ID"
          },
          "transformerName": {
            "type": "string",
            "examples": ["my-dataset-transformer"],
            "description": "Transformer name"
          }
        }
      },
      "TypeConfig": {
        "type": "object",
        "properties": {
          "enumName": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "label": {
            "type": "string"
          },
          "supportedAuths": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "builtIn": {
            "type": "boolean"
          }
        }
      },
      "UserData": {
        "type": "object",
        "required": ["id", "username"],
        "properties": {
          "id": {
            "type": "string"
          },
          "username": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "email": {
            "type": "string"
          }
        }
      },
      "UsernamePassAuth": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "type"
          },
          "username": {
            "type": "string",
            "description": "Username"
          },
          "password": {
            "type": "string",
            "description": "Password"
          }
        }
      },
      "ValidationError": {
        "type": "object",
        "required": ["schemaId", "error"],
        "description": "Schema validation error",
        "properties": {
          "schemaId": {
            "type": "integer",
            "format": "int32",
            "examples": [101],
            "description": "Schema ID that Validation Error relates to"
          },
          "error": {
            "type": "object",
            "required": ["type", "message"],
            "description": "Validation Error Details",
            "properties": {
              "type": {
                "type": "string",
                "description": "Validation Error type"
              },
              "code": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "evaluationPath": {
                "type": "string"
              },
              "schemaPath": {
                "type": "string",
                "deprecated": true
              },
              "schemaLocation": {
                "type": "string"
              },
              "instanceLocation": {
                "type": "string"
              },
              "property": {
                "type": "string"
              },
              "arguments": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "details": {
                "type": "string"
              },
              "messageKey": {
                "type": "string"
              },
              "valid": {
                "type": "boolean"
              },
              "message": {
                "type": "string"
              }
            }
          }
        }
      },
      "Variable": {
        "type": "object",
        "required": ["id", "testId", "name", "order", "labels", "changeDetection"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "group": {
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "calculation": {
            "type": "string"
          },
          "changeDetection": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChangeDetection"
            }
          }
        }
      },
      "VersionInfo": {
        "type": "object",
        "required": ["version", "commit", "startTimestamp"],
        "properties": {
          "version": {
            "type": "string",
            "examples": ["0.9.4"],
            "description": "Version of Horreum"
          },
          "commit": {
            "type": "string",
            "examples": ["15bc9e5"],
            "description": "Commit of Horreum"
          },
          "startTimestamp": {
            "type": "integer",
            "format": "int64",
            "examples": ["2023-10-18T18:00:57.000Z"],
            "description": "Timestamp of server startup"
          },
          "privacyStatement": {
            "type": "string",
            "examples": ["link/to/external/privacy/statement"],
            "description": "Privacy statement"
          }
        }
      },
      "View": {
        "type": "object",
        "required": ["id", "name", "components"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          },
          "components": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ViewComponent"
            },
            "description": "List of components for this view"
          }
        }
      },
      "ViewComponent": {
        "type": "object",
        "required": ["id", "headerOrder", "headerName", "labels"],
        "description": "Single view component",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "headerOrder": {
            "type": "integer",
            "format": "int32"
          },
          "headerName": {
            "type": "string"
          },
          "labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "render": {
            "type": "string"
          }
        }
      },
      "Watch": {
        "type": "object",
        "required": ["users", "optout", "teams", "testId"],
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "users": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "optout": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "teams": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "testId": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "securitySchemes": {
      "SecurityScheme": {
        "type": "openIdConnect",
        "description": "Authentication",
        "openIdConnectUrl": "https://auth.redhat.com/auth/realms/EmployeeIDP/.well-known/openid-configuration"
      }
    }
  },
  "tags": [
    {
      "name": "Config",
      "description": "Endpoint providing configuration for the Horreum System",
      "x-smallrye-profile-external": ""
    },
    {
      "name": "Dataset",
      "description": "Datasets are used as the basis for all change detection and reporting",
      "x-smallrye-profile-external": ""
    },
    {
      "name": "Experiment",
      "description": "Experiments allow users to apply change detection rules to two different datasets. This allows for pass/fail of KPIS based on A/B testing",
      "x-smallrye-profile-external": ""
    },
    {
      "name": "Run",
      "description": "Manage test runs. Runs are instances of results of a benchmark execution",
      "x-smallrye-profile-external": ""
    },
    {
      "name": "Schema",
      "description": "Manage schemas",
      "x-smallrye-profile-external": ""
    },
    {
      "name": "Test",
      "description": "Endpoint giving access to tests defined in Horreum.",
      "x-smallrye-profile-external": ""
    },
    {
      "name": "User",
      "description": "Manage user accounts",
      "x-smallrye-profile-external": ""
    },
    {
      "name": "action",
      "description": "Manage Actions"
    },
    {
      "name": "alerting",
      "description": "Manage alerts"
    },
    {
      "name": "banner",
      "description": "Manage banner"
    },
    {
      "name": "changes",
      "description": "Manage changes"
    },
    {
      "name": "log",
      "description": "Manage processing logs"
    },
    {
      "name": "notifications",
      "description": "Manage reports"
    },
    {
      "name": "report",
      "description": "Manage reports"
    },
    {
      "name": "sql",
      "description": "Manage sql service"
    },
    {
      "name": "subscriptions",
      "description": "Manage subscriptions"
    },
    {
      "name": "ui",
      "description": "Manage schemas"
    }
  ],
  "paths": {
    "/api/action": {
      "put": {
        "operationId": "ActionService_updateAction",
        "tags": ["action"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "ActionService_addAction",
        "tags": ["action"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        }
      }
    },
    "/api/action/allowedSites": {
      "get": {
        "operationId": "ActionService_allowedSites",
        "tags": ["action"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllowedSite"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "ActionService_addSite",
        "tags": ["action"],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowedSite"
                }
              }
            }
          }
        }
      }
    },
    "/api/action/allowedSites/{id}": {
      "delete": {
        "operationId": "ActionService_deleteSite",
        "tags": ["action"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/action/global": {
      "post": {
        "operationId": "ActionService_addGlobalAction",
        "tags": ["action"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Action"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        }
      }
    },
    "/api/action/global/{id}": {
      "delete": {
        "operationId": "ActionService_deleteGlobalAction",
        "tags": ["action"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/action/list": {
      "get": {
        "operationId": "ActionService_listActions",
        "tags": ["action"],
        "parameters": [
          {
            "name": "direction",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortDirection"
                },
                {
                  "default": "Ascending"
                }
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/action/test/{id}": {
      "get": {
        "operationId": "ActionService_getTestActions",
        "tags": ["action"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Action"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/action/{id}": {
      "get": {
        "operationId": "ActionService_getAction",
        "tags": ["action"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Action"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "ActionService_deleteAction",
        "tags": ["action"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/alerting/change/{id}": {
      "put": {
        "operationId": "AlertingService_updateChange",
        "tags": ["alerting"],
        "parameters": [
          {
            "required": true,
            "name": "id",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Change"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      },
      "delete": {
        "operationId": "AlertingService_deleteChange",
        "tags": ["alerting"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/alerting/changeDetection": {
      "post": {
        "operationId": "AlertingService_updateChangeDetection",
        "tags": ["alerting"],
        "parameters": [
          {
            "required": true,
            "name": "testId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeDetectionUpdate"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/alerting/changeDetectionModels": {
      "get": {
        "operationId": "AlertingService_changeDetectionModels",
        "tags": ["alerting"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConditionConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/alerting/changes": {
      "get": {
        "operationId": "AlertingService_changes",
        "tags": ["alerting"],
        "parameters": [
          {
            "name": "fingerprint",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "name": "var",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Change"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/alerting/dashboard": {
      "get": {
        "operationId": "AlertingService_dashboard",
        "tags": ["alerting"],
        "parameters": [
          {
            "name": "fingerprint",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "name": "test",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DashboardInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/alerting/datapoint/last": {
      "post": {
        "operationId": "AlertingService_findLastDatapoints",
        "tags": ["alerting"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LastDatapointsParams"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatapointLastTimestamp"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/alerting/defaultChangeDetectionConfigs": {
      "get": {
        "operationId": "AlertingService_defaultChangeDetectionConfigs",
        "tags": ["alerting"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ChangeDetection"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/alerting/expectRun": {
      "post": {
        "operationId": "AlertingService_expectRun",
        "tags": ["alerting"],
        "parameters": [
          {
            "name": "backlink",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expectedby",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "name": "test",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "name": "timeout",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/alerting/expectations": {
      "get": {
        "operationId": "AlertingService_expectations",
        "tags": ["alerting"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RunExpectation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/alerting/missingdatarule": {
      "post": {
        "operationId": "AlertingService_updateMissingDataRule",
        "tags": ["alerting"],
        "parameters": [
          {
            "required": true,
            "name": "testId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MissingDataRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "get": {
        "operationId": "AlertingService_missingDataRules",
        "tags": ["alerting"],
        "parameters": [
          {
            "required": true,
            "name": "testId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MissingDataRule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/alerting/missingdatarule/{id}": {
      "delete": {
        "operationId": "AlertingService_deleteMissingDataRule",
        "tags": ["alerting"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/alerting/recalculate": {
      "post": {
        "operationId": "AlertingService_recalculateDatapoints",
        "tags": ["alerting"],
        "parameters": [
          {
            "name": "clear",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "debug",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "notify",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "required": true,
            "name": "test",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "get": {
        "operationId": "AlertingService_getDatapointRecalculationStatus",
        "tags": ["alerting"],
        "parameters": [
          {
            "required": true,
            "name": "test",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatapointRecalculationStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/alerting/variables": {
      "get": {
        "operationId": "AlertingService_variables",
        "tags": ["alerting"],
        "parameters": [
          {
            "name": "test",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Variable"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "AlertingService_updateVariables",
        "tags": ["alerting"],
        "parameters": [
          {
            "required": true,
            "name": "test",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Variable"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/banner": {
      "post": {
        "operationId": "BannerService_setBanner",
        "tags": ["banner"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Banner"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "get": {
        "operationId": "BannerService_getBanner",
        "tags": ["banner"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Banner"
                }
              }
            }
          }
        }
      }
    },
    "/api/changes": {
      "get": {
        "operationId": "ChangesService_healthcheck",
        "tags": ["changes"],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/changes/annotations": {
      "post": {
        "operationId": "ChangesService_annotations",
        "tags": ["changes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AnnotationsQuery"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AnnotationDefinition"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/changes/query": {
      "post": {
        "operationId": "ChangesService_query",
        "tags": ["changes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Query"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TimeseriesTarget"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/changes/search": {
      "post": {
        "operationId": "ChangesService_search",
        "tags": ["changes"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Target"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/config/datastore": {
      "put": {
        "description": "Update an existing Datastore definition",
        "operationId": "ConfigService_updateDatastore",
        "tags": ["Config"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Datastore"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The ID of the updated Datastore",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new Datastore",
        "operationId": "ConfigService_newDatastore",
        "tags": ["Config"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Datastore"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The ID for the new Datastore",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Obtain list of configured datastores for particular team",
        "operationId": "ConfigService_getDatastoresByTeam",
        "tags": ["Config"],
        "parameters": [
          {
            "description": "name of the team to search for defined datastores",
            "example": "perf-team",
            "name": "team",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Datastore"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/config/datastore/types": {
      "get": {
        "description": "Obtain list of available datastore types",
        "operationId": "ConfigService_datastoreTypes",
        "tags": ["Config"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TypeConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/config/datastore/{id}": {
      "delete": {
        "description": "Test a Datastore",
        "operationId": "ConfigService_deleteDatastore",
        "tags": ["Config"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/config/datastore/{id}/test": {
      "get": {
        "description": "Test a Datastore connection",
        "operationId": "ConfigService_testDatastore",
        "tags": ["Config"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatastoreTestResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/config/keycloak": {
      "get": {
        "description": "Obtain configuration information about keycloak server securing Horreum instance",
        "operationId": "ConfigService_keycloak",
        "tags": ["Config"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeycloakConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/config/version": {
      "get": {
        "description": "Obtain version of the running Horreum instance",
        "operationId": "ConfigService_version",
        "tags": ["Config"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VersionInfo"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/list/byRun/{runId}": {
      "get": {
        "description": "Retrieve a paginated list of Datasets, with total count, by Run",
        "operationId": "DatasetService_listByRun",
        "tags": ["Dataset"],
        "parameters": [
          {
            "description": "Run ID of run to retrieve list of Datasets",
            "example": 101,
            "name": "runId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "JSON Filter expression to apply to query",
            "example": "{\"buildID\":111111}",
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "limit the number of results",
            "example": 20,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "filter by page number of a paginated list of Schemas starting from 1",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Field name to sort results",
            "example": "name",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          },
          {
            "description": "Optional View ID to filter datasets by view",
            "example": 202,
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetList"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/list/bySchema": {
      "get": {
        "description": "Retrieve a paginated list of Datasets, with total count, by Schema",
        "operationId": "DatasetService_listDatasetsBySchema",
        "tags": ["Dataset"],
        "parameters": [
          {
            "description": "Schema URI",
            "example": "uri:techempower:0.1",
            "name": "uri",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "limit the number of results",
            "example": 20,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "filter by page number of a paginated list of Schemas starting from 1",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Field name to sort results",
            "example": "name",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "start"
            }
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetList"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/list/byTest/{testId}": {
      "get": {
        "description": "Retrieve a paginated list of Datasets, with total count, by Test",
        "operationId": "DatasetService_listByTest",
        "tags": ["Dataset"],
        "parameters": [
          {
            "description": "Test ID of test to retrieve list of Datasets",
            "example": 101,
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "JSON Filter expression to apply to query",
            "example": "{\"buildID\":111111}",
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "limit the number of results",
            "example": 20,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "filter by page number of a paginated list of Schemas starting from 1",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Field name to sort results",
            "example": "name",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          },
          {
            "description": "Optional View ID to filter datasets by view",
            "example": 202,
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetList"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/{datasetId}/labelValues": {
      "get": {
        "operationId": "DatasetService_getDatasetLabelValues",
        "tags": ["Dataset"],
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LabelValue"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/{datasetId}/previewLabel": {
      "post": {
        "operationId": "DatasetService_previewLabel",
        "tags": ["Dataset"],
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Label"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LabelPreview"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/{datasetId}/summary": {
      "get": {
        "operationId": "DatasetService_getDatasetSummary",
        "tags": ["Dataset"],
        "parameters": [
          {
            "name": "datasetId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "viewId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DatasetSummary"
                }
              }
            }
          }
        }
      }
    },
    "/api/dataset/{id}": {
      "get": {
        "description": "Retrieve Dataset by ID",
        "operationId": "DatasetService_getDataset",
        "tags": ["Dataset"],
        "parameters": [
          {
            "description": "Dataset ID to retrieve",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "JVM system properties of a particular host.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dataset"
                }
              }
            }
          },
          "404": {
            "description": "No Dataset with the given id was found",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/experiment/models": {
      "get": {
        "description": "Retrieve a list of Condition Config models",
        "operationId": "ExperimentService_models",
        "tags": ["Experiment"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConditionConfig"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/experiment/run": {
      "get": {
        "description": "Run an experiment for a given dataset and experiment profile",
        "operationId": "ExperimentService_runExperiments",
        "tags": ["Experiment"],
        "parameters": [
          {
            "description": "The dataset to run the experiment on",
            "example": 101,
            "name": "datasetId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of experiment results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExperimentResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/experiment/{testId}/profiles": {
      "get": {
        "description": "Retrieve Experiment Profiles by Test ID",
        "operationId": "ExperimentService_profiles",
        "tags": ["Experiment"],
        "parameters": [
          {
            "description": "Test ID to retrieve Experiment Profiles for",
            "example": 101,
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExperimentProfile"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Save new or update existing Experiment Profiles for a Test ",
        "operationId": "ExperimentService_addOrUpdateProfile",
        "tags": ["Experiment"],
        "parameters": [
          {
            "description": "Test ID to retrieve Experiment Profiles for",
            "example": 101,
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExperimentProfile"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/experiment/{testId}/profiles/{profileId}": {
      "delete": {
        "description": "Delete an Experiment Profiles for a Test",
        "operationId": "ExperimentService_deleteProfile",
        "tags": ["Experiment"],
        "parameters": [
          {
            "description": "Test ID",
            "example": 101,
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Experiment Profile ID",
            "example": 202,
            "name": "profileId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/log/action/{testId}": {
      "get": {
        "operationId": "LogService_getActionLog",
        "tags": ["log"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "level",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionLog"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "LogService_deleteActionLogs",
        "tags": ["log"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/log/action/{testId}/count": {
      "get": {
        "operationId": "LogService_getActionLogCount",
        "tags": ["log"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "level",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/api/log/dataset/{source}/{testId}": {
      "get": {
        "operationId": "LogService_getDatasetLog",
        "tags": ["log"],
        "parameters": [
          {
            "name": "source",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasetId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "level",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DatasetLog"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "LogService_deleteDatasetLogs",
        "tags": ["log"],
        "parameters": [
          {
            "name": "source",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasetId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/log/dataset/{source}/{testId}/count": {
      "get": {
        "operationId": "LogService_getDatasetLogCount",
        "tags": ["log"],
        "parameters": [
          {
            "name": "source",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "datasetId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "level",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/api/log/transformation/{testId}": {
      "get": {
        "operationId": "LogService_getTransformationLog",
        "tags": ["log"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "level",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "runId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransformationLog"
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "LogService_deleteTransformationLogs",
        "tags": ["log"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "from",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "runId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "to",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/log/transformation/{testId}/count": {
      "get": {
        "operationId": "LogService_getTransformationLogCount",
        "tags": ["log"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "level",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "runId",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications/methods": {
      "get": {
        "operationId": "NotificationService_methods",
        "tags": ["notifications"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications/settings": {
      "post": {
        "operationId": "NotificationService_updateSettings",
        "tags": ["notifications"],
        "parameters": [
          {
            "required": true,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "name": "team",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NotificationSettings"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "get": {
        "operationId": "NotificationService_settings",
        "tags": ["notifications"],
        "parameters": [
          {
            "required": true,
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "required": true,
            "name": "team",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationSettings"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/notifications/test": {
      "post": {
        "operationId": "NotificationService_testNotifications",
        "tags": ["notifications"],
        "parameters": [
          {
            "required": true,
            "name": "data",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "method",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/report/comment/{reportId}": {
      "post": {
        "operationId": "ReportService_updateComment",
        "tags": ["report"],
        "parameters": [
          {
            "name": "reportId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportComment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReportComment"
                }
              }
            }
          }
        }
      }
    },
    "/api/report/table": {
      "get": {
        "operationId": "ReportService_getTableReports",
        "tags": ["report"],
        "parameters": [
          {
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          },
          {
            "name": "folder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "roles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "test",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllTableReports"
                }
              }
            }
          }
        }
      }
    },
    "/api/report/table/config": {
      "post": {
        "operationId": "ReportService_updateTableReportConfig",
        "tags": ["report"],
        "parameters": [
          {
            "name": "edit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableReportConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReport"
                }
              }
            }
          }
        }
      }
    },
    "/api/report/table/config/import": {
      "post": {
        "operationId": "ReportService_importTableReportConfig",
        "tags": ["report"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableReportConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/report/table/config/{id}": {
      "get": {
        "operationId": "ReportService_getTableReportConfig",
        "tags": ["report"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReportConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/report/table/config/{id}/export": {
      "get": {
        "operationId": "ReportService_exportTableReportConfig",
        "tags": ["report"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReportConfig"
                }
              }
            }
          }
        }
      }
    },
    "/api/report/table/preview": {
      "post": {
        "operationId": "ReportService_previewTableReport",
        "tags": ["report"],
        "parameters": [
          {
            "name": "edit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TableReportConfig"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReport"
                }
              }
            }
          }
        }
      }
    },
    "/api/report/table/{id}": {
      "get": {
        "operationId": "ReportService_getTableReport",
        "tags": ["report"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TableReport"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "ReportService_deleteTableReport",
        "tags": ["report"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/run/autocomplete": {
      "get": {
        "operationId": "RunService_autocomplete",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "JSONPath to be autocompleted",
            "example": "$.",
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/run/bySchema": {
      "get": {
        "description": "Retrieve a paginated list of Runs with available count for a given Schema URI",
        "operationId": "RunService_listRunsBySchema",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Schema URI",
            "example": "uri:my-schema:0.1",
            "name": "uri",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "limit the number of results",
            "example": 20,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "filter by page number of a paginated list of Tests starting from 1",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Field name to sort results",
            "example": "name",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunsSummary"
                }
              }
            }
          }
        }
      }
    },
    "/api/run/count": {
      "get": {
        "description": "Run count summary for given Test ID",
        "operationId": "RunService_runCount",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Test ID",
            "example": 101,
            "name": "testId",
            "required": true,
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunCount"
                }
              }
            }
          }
        }
      }
    },
    "/api/run/data": {
      "post": {
        "description": "Upload a new Run",
        "operationId": "RunService_addRunFromData",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "start timestamp of run, or json path expression",
            "examples": {
              "scalar value": {
                "value": "2023-10-23T00:13:35.000Z"
              },
              "json path": {
                "value": "$.buildTimeStamp"
              }
            },
            "name": "start",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "stop timestamp of run, or json path expression",
            "examples": {
              "scalar value": {
                "value": "2023-10-23T00:13:35.000Z"
              },
              "json path": {
                "value": "$.buildTimeStamp"
              }
            },
            "name": "stop",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "test name of ID",
            "example": "my-benchmark",
            "name": "test",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the new owner",
            "example": "perf-team",
            "name": "owner",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New Access level",
            "example": "0",
            "name": "access",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Access"
            }
          },
          {
            "description": "Schema URI",
            "example": "uri:my-benchmark:0.2",
            "in": "query",
            "name": "schema",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Run description",
            "example": "AWS runs",
            "name": "description",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "202": {
            "description": "The request has been accepted for processing. Returns a list of created run IDs if available, or an empty list if processing is still ongoing. Label values and change detection processing is performed asynchronously.",
            "content": {
              "text/plain": {
                "example": "101,102,103",
                "schema": {
                  "type": "string",
                  "examples": ["101,102,103"]
                }
              }
            }
          },
          "204": {
            "description": "Data is valid but no run was created",
            "content": {
              "text/plain": {}
            }
          },
          "400": {
            "description": "Some fields are missing or invalid",
            "content": {
              "text/plain": {}
            }
          }
        }
      }
    },
    "/api/run/list": {
      "get": {
        "description": "Retrieve a paginated list of Runs with available count",
        "operationId": "RunService_listAllRuns",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "query string to filter runs",
            "example": "$.*",
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "match all Runs?",
            "example": false,
            "name": "matchAll",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "__my, __all or a comma delimited  list of roles",
            "example": "__my",
            "name": "roles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "show trashed runs",
            "example": false,
            "name": "trashed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "limit the number of results",
            "example": 20,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "filter by page number of a paginated list of Tests starting from 1",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Field name to sort results",
            "example": "name",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunsSummary"
                }
              }
            }
          }
        }
      }
    },
    "/api/run/list/{testId}": {
      "get": {
        "description": "Retrieve a paginated list of Runs with available count for a given Test ID",
        "operationId": "RunService_listTestRuns",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Test ID",
            "example": 101,
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "include trashed runs",
            "example": false,
            "name": "trashed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "description": "limit the number of results",
            "example": 20,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "filter by page number of a paginated list of Tests starting from 1",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Field name to sort results",
            "example": "name",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunsSummary"
                }
              }
            }
          }
        }
      }
    },
    "/api/run/recalculateAll": {
      "post": {
        "description": "Recalculate Datasets for Runs between two dates",
        "operationId": "RunService_recalculateAll",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "start timestamp",
            "example": "1698013206000",
            "name": "from",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "end timestamp",
            "example": "1698013206000",
            "name": "to",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/run/test": {
      "post": {
        "description": "Upload a new Run",
        "operationId": "RunService_addRun",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "test name of ID",
            "example": "my-benchmark",
            "name": "test",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Name of the new owner",
            "example": "perf-team",
            "name": "owner",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New Access level",
            "example": "0",
            "name": "access",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Access"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Run"
              }
            }
          },
          "required": true
        },
        "responses": {
          "202": {
            "description": "The request has been accepted for processing. Returns a list of created run IDs if available, or an empty list if processing is still ongoing. Label values and change detection processing is performed asynchronously.",
            "content": {
              "application/json": {
                "example": [101, 102, 103],
                "schema": {
                  "type": "array",
                  "examples": [[101, 102, 103]],
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Some fields are missing or invalid",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/run/{id}": {
      "get": {
        "description": "Get extended Run information by Run ID",
        "operationId": "RunService_getRun",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID",
            "example": 202,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Run data with the referenced schemas and generated datasets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunExtended"
                }
              }
            }
          },
          "404": {
            "description": "If no Run have been found with the given id",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/run/{id}/data": {
      "get": {
        "description": "Get Run data by Run ID",
        "operationId": "RunService_getData",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID",
            "example": 202,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "FIlter by Schmea URI",
            "example": "uri:my-benchmark:0.1",
            "in": "query",
            "name": "schemaUri",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Run payload",
            "content": {
              "application/json": {
                "example": "{ \"buildID\": 1709, ...}",
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/run/{id}/description": {
      "post": {
        "description": "Update Run description",
        "operationId": "RunService_updateDescription",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/run/{id}/labelValues": {
      "get": {
        "description": "Get all the label values for the run",
        "operationId": "RunService_getRunLabelValues",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run Id",
            "example": 101,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "either a required json sub-document or path expression",
            "examples": {
              "object": {
                "description": "json object that must exist in the values object",
                "value": "{labelName:necessaryValue,...}"
              },
              "string": {
                "description": "valid filtering jsonpath that returns null if not found (not predicates)",
                "value": "$.count ? (@ < 20 && @ > 10)"
              }
            },
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "{}"
            }
          },
          {
            "description": "label name for sorting",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "either Ascending or Descending",
            "example": "count",
            "name": "direction",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "Ascending"
            }
          },
          {
            "description": "the maximum number of results to include",
            "example": 10,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 2147483647
            }
          },
          {
            "description": "which page to skip to when using a limit",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "label name(s) to include in the result as scalar or comma separated",
            "examples": {
              "single": {
                "description": "including a single label",
                "value": "id"
              },
              "multiple": {
                "description": "including multiple labels",
                "value": "id,count"
              }
            },
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "label name(s) to exclude from the result as scalar or comma separated",
            "examples": {
              "single": {
                "description": "excluding a single label",
                "value": "id"
              },
              "multiple": {
                "description": "excluding multiple labels",
                "value": "id,count"
              }
            },
            "name": "exclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "enable filtering for multiple values with an array of values",
            "example": true,
            "name": "multiFilter",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "label Values",
            "content": {
              "application/json": {
                "example": "[ { \"datasetId\" : 101, \"runId\": 201, \"values\" : { [labelName] : labelValue } },...]",
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportedLabelValues"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/run/{id}/metadata": {
      "get": {
        "description": "Get Run  meta data by Run ID",
        "operationId": "RunService_getMetadata",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID",
            "example": 202,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Filter by Schmea URI",
            "example": "uri:my-benchmark:0.1",
            "in": "query",
            "name": "schemaUri",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Run payload",
            "content": {
              "application/json": {
                "example": "{ \"metaDataID\": 1709, ...}",
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/api/run/{id}/recalculate": {
      "post": {
        "description": "Recalculate Datasets for Run",
        "operationId": "RunService_recalculateRunDatasets",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Array of generated Datasets",
            "content": {
              "application/json": {
                "example": [101, 102, 103],
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/run/{id}/schema": {
      "post": {
        "description": "Update Run schema for part of JSON data",
        "operationId": "RunService_updateRunSchema",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "JSON path expression to update schema",
            "example": "$.schemaURI",
            "name": "path",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/run/{id}/summary": {
      "get": {
        "description": "Get Run Summary information by Run ID",
        "operationId": "RunService_getRunSummary",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID",
            "example": 202,
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Run summary with the referenced schemas and generated datasets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RunSummary"
                }
              }
            }
          },
          "404": {
            "description": "If no Run have been found with the given id",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/api/run/{id}/trash": {
      "post": {
        "description": "Trash a Run with a given ID",
        "operationId": "RunService_trash",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "should run be trashed?",
            "example": true,
            "name": "isTrashed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/run/{id}/updateAccess": {
      "post": {
        "description": "Update the Access configuration for a Run",
        "operationId": "RunService_updateRunAccess",
        "tags": ["Run"],
        "parameters": [
          {
            "description": "Run ID to update Access",
            "example": 101,
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Name of the new owner",
            "example": "perf-team",
            "name": "owner",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New Access level",
            "example": "0",
            "name": "access",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Access"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/schema": {
      "put": {
        "description": "Update an existing Schema",
        "operationId": "SchemaService_updateSchema",
        "tags": ["Schema"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Schema updated successfully",
            "content": {
              "application/json": {
                "example": 103,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve a paginated list of Schemas with available count",
        "operationId": "SchemaService_listSchemas",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "limit the number of results",
            "example": 20,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "filter by page number of a paginated list of Schemas starting from 1",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Field name to sort results",
            "example": "name",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/SortDirection"
            }
          },
          {
            "description": "__my, __all or a comma delimited  list of roles",
            "example": "__my",
            "name": "roles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaQueryResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Save a new Schema",
        "operationId": "SchemaService_addSchema",
        "tags": ["Schema"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New schema created successfully",
            "content": {
              "application/json": {
                "example": 103,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/allLabels": {
      "get": {
        "description": "Retrieve list of Labels for ny name. Allows users to retrieve all Label Definitions that have the same name",
        "operationId": "SchemaService_allLabels",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Label name",
            "example": "buildID",
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LabelInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/allTransformers": {
      "get": {
        "description": "Retrieve all transformers",
        "operationId": "SchemaService_allTransformers",
        "tags": ["Schema"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TransformerInfo"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/descriptors": {
      "get": {
        "description": "Retrieve a list of Schema Descriptors",
        "operationId": "SchemaService_descriptors",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Limit to a single Schema by ID",
            "example": 102,
            "name": "id",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "integer",
                "format": "int32"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SchemaDescriptor"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/findUsages": {
      "get": {
        "description": "Find all usages of a Schema by label name",
        "operationId": "SchemaService_findUsages",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Name of label to search for",
            "example": "Throughput",
            "name": "label",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LabelLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/idByUri/{uri}": {
      "get": {
        "description": "Retrieve Schema ID by uri",
        "operationId": "SchemaService_idByUri",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema uri",
            "example": "uri:my-schema:0.1",
            "name": "uri",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": 101,
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/import": {
      "put": {
        "description": "Update an existing Schema using its previously exported version",
        "operationId": "SchemaService_updateSchemaWithImport",
        "tags": ["Schema"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Schema updated successfully using previously exported one",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Import a previously exported Schema as a new Schema",
        "operationId": "SchemaService_addSchemaWithImport",
        "tags": ["Schema"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SchemaExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New Schema created successfully using previously exported one",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/{id}": {
      "get": {
        "description": "Retrieve Schema by ID",
        "operationId": "SchemaService_getSchema",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID to retrieve",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns Schema if a matching id is found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Schema"
                }
              }
            }
          },
          "404": {
            "description": "No Schema with the given id was found",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Schema by id",
        "operationId": "SchemaService_deleteSchema",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID to delete",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/schema/{id}/export": {
      "get": {
        "description": "Export a Schema",
        "operationId": "SchemaService_exportSchema",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A JSON representation of the SchemaExport object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SchemaExport"
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/{id}/updateAccess": {
      "post": {
        "description": "Update the Access configuration for a Schema",
        "operationId": "SchemaService_updateSchemaAccess",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID to update Access",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Name of the new owner",
            "example": "perf-team",
            "name": "owner",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New Access level",
            "example": "0",
            "name": "access",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Access"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/schema/{schemaId}/labels": {
      "put": {
        "description": "Update existing Label(s) for a Schema",
        "operationId": "SchemaService_updateLabels",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "schemaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Schema updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve list of Labels for a Schema by Schema ID",
        "operationId": "SchemaService_labels",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "schemaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Label"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Save new Label for a Schema",
        "operationId": "SchemaService_addLabels",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "schemaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Label"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New schema created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "integer",
                    "format": "int32"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/{schemaId}/labels/{labelId}": {
      "delete": {
        "description": "Delete existing Label from a Schema",
        "operationId": "SchemaService_deleteLabel",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "schemaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Label ID",
            "example": 202,
            "name": "labelId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/schema/{schemaId}/transformers": {
      "put": {
        "description": "Save new or update existing Transformer definition",
        "operationId": "SchemaService_updateTransformer",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "schemaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transformer"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Transformer updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "List all Transformers defined for a Schema",
        "operationId": "SchemaService_listTransformers",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "schemaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transformer"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Save new or update existing Transformer definition",
        "operationId": "SchemaService_addTransformer",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "schemaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Transformer"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New transformer created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        }
      }
    },
    "/api/schema/{schemaId}/transformers/{transformerId}": {
      "delete": {
        "description": "Delete a Transformer defined for a Schema",
        "operationId": "SchemaService_deleteTransformer",
        "tags": ["Schema"],
        "parameters": [
          {
            "description": "Schema ID",
            "example": 101,
            "name": "schemaId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Transformer ID",
            "example": 202,
            "name": "transformerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/sql/roles": {
      "get": {
        "operationId": "SqlService_roles",
        "tags": ["sql"],
        "parameters": [
          {
            "name": "system",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/sql/testjsonpath": {
      "get": {
        "description": "Test a JSONPath for syntax errors using database",
        "operationId": "SqlService_testJsonPath",
        "tags": ["sql"],
        "parameters": [
          {
            "description": "JSONPath to be tested",
            "example": "$.qdup",
            "name": "testjsonpath",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JsonpathValidation"
                }
              }
            }
          }
        }
      }
    },
    "/api/sql/{id}/querydataset": {
      "get": {
        "operationId": "SqlService_queryDatasetData",
        "tags": ["sql"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "array",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "JSONPath path executed on the Dataset",
            "example": "$.test",
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "schemaUri",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/sql/{id}/queryrun": {
      "get": {
        "operationId": "SqlService_queryRunData",
        "tags": ["sql"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "array",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "description": "JSONPath path executed on the Run",
            "example": "$.results",
            "name": "query",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "uri",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QueryResult"
                }
              }
            }
          }
        }
      }
    },
    "/api/subscriptions/{testId}": {
      "get": {
        "operationId": "SubscriptionService_getSubscription",
        "tags": ["subscriptions"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Watch"
                }
              }
            }
          }
        }
      }
    },
    "/api/subscriptions/{testid}": {
      "post": {
        "operationId": "SubscriptionService_updateSubscription",
        "tags": ["subscriptions"],
        "parameters": [
          {
            "name": "testid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Watch"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/subscriptions/{testid}/add": {
      "post": {
        "operationId": "SubscriptionService_addUserOrTeam",
        "tags": ["subscriptions"],
        "parameters": [
          {
            "name": "testid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/subscriptions/{testid}/remove": {
      "post": {
        "operationId": "SubscriptionService_removeUserOrTeam",
        "tags": ["subscriptions"],
        "parameters": [
          {
            "name": "testid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "string"
              }
            },
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/test": {
      "put": {
        "description": "Update an existing test",
        "operationId": "TestService_updateTest",
        "tags": ["Test"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Test"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Test updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              }
            }
          }
        }
      },
      "get": {
        "description": "Retrieve a paginated list of Tests with available count",
        "operationId": "TestService_listTests",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "__my, __all or a comma delimited  list of roles",
            "example": "__my",
            "name": "roles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "limit the number of results",
            "example": 20,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "filter by page number of a paginated list of Tests starting from 1",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Field name to sort results",
            "example": "name",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "name"
            }
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortDirection"
                },
                {
                  "default": "Ascending"
                }
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestQueryResult"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Create a new test",
        "operationId": "TestService_addTest",
        "tags": ["Test"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Test"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New test created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              }
            }
          }
        }
      }
    },
    "/api/test/byName/{name}": {
      "get": {
        "description": "Retrieve a test by name",
        "operationId": "TestService_getByNameOrId",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Name of test to retrieve",
            "example": "my-comprehensive-benchmark",
            "in": "path",
            "name": "name",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              }
            }
          }
        }
      }
    },
    "/api/test/folders": {
      "get": {
        "description": "Retrieve a list of all folders",
        "operationId": "TestService_folders",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "\"__my\", \"__all\" or a comma delimited  list of roles",
            "example": "__my",
            "name": "roles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all folders",
            "content": {
              "application/json": {
                "example": ["quarkus", "ocp-perf-team"],
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/test/import": {
      "put": {
        "description": "Update an existing Test using its exported version",
        "operationId": "TestService_updateTestWithImport",
        "tags": ["Test"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Test updated successfully using its exported version",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Import a previously exported Test as new Test",
        "operationId": "TestService_addTestWithImport",
        "tags": ["Test"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestExport"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "New Test created successfully from a previously exported one",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "/api/test/summary": {
      "get": {
        "description": "Retrieve a summary of Tests in a folder",
        "operationId": "TestService_getTestSummary",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "\"__my\", \"__all\" or a comma delimited  list of roles",
            "example": "__my",
            "name": "roles",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "name of the Folder containing the Tests",
            "example": "My Team Folder",
            "name": "folder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "limit the result count",
            "example": 20,
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 20
            },
            "in": "query"
          },
          {
            "description": "filter by page number of a paginated list of, set to 0 means return all results",
            "example": 1,
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "in": "query"
          },
          {
            "description": "Sort direction",
            "example": "Ascending",
            "name": "direction",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/SortDirection"
                },
                {
                  "default": "Ascending"
                }
              ]
            }
          },
          {
            "description": "Filter by test name",
            "example": "MyTest",
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestListing"
                }
              }
            }
          }
        }
      }
    },
    "/api/test/{id}": {
      "get": {
        "description": "Retrieve a test by id",
        "operationId": "TestService_getTest",
        "tags": ["Test"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Test"
                }
              }
            }
          }
        }
      },
      "delete": {
        "description": "Delete a Test by id",
        "operationId": "TestService_deleteTest",
        "tags": ["Test"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/test/{id}/export": {
      "get": {
        "operationId": "TestService_exportTest",
        "tags": ["Test"],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A Test definition formatted as json",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestExport"
                }
              }
            }
          }
        }
      }
    },
    "/api/test/{id}/filteringLabelValues": {
      "get": {
        "description": "List all unique Label Values for a Test",
        "operationId": "TestService_filteringLabelValues",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to retrieve Filtering Label Values for",
            "example": 10,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          }
        }
      }
    },
    "/api/test/{id}/fingerprint": {
      "get": {
        "description": "List all Fingerprints for a Test",
        "operationId": "TestService_listFingerprints",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to retrieve Fingerprints for",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Fingerprints"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/test/{id}/labelValues": {
      "get": {
        "description": "List all Label Values for a Test",
        "operationId": "TestService_getTestLabelValues",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to retrieve Label Values for",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Retrieve values for Filtering Labels",
            "example": true,
            "name": "filtering",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "Retrieve values for Metric Labels",
            "example": false,
            "name": "metrics",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "description": "either a required json sub-document or path expression",
            "examples": {
              "object": {
                "description": "json object that must exist in the values object",
                "value": "{labelName:necessaryValue,...}"
              },
              "string": {
                "description": "valid filtering jsonpath that returns null if not found (not predicates)",
                "value": "$.count ? (@ < 20 && @ > 10)"
              }
            },
            "name": "filter",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "{}"
            }
          },
          {
            "description": "ISO-like date time string or epoch millis",
            "example": "1970-01-01T00:00:00+00:00 or an integer",
            "name": "before",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "ISO-like date time string or epoch millis",
            "example": "1970-01-01T00:00:00+00:00 or an integer",
            "name": "after",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "json path to sortable value or start or stop for sorting by time",
            "example": "$.label or start or stop",
            "name": "sort",
            "in": "query",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "description": "either Ascending or Descending",
            "example": "count",
            "name": "direction",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "Ascending"
            }
          },
          {
            "description": "the maximum number of results to include",
            "example": 10,
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "which page to skip to when using a limit",
            "example": 2,
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "description": "label name(s) to include in the result as scalar or comma separated",
            "examples": {
              "single": {
                "description": "including a single label",
                "value": "id"
              },
              "multiple": {
                "description": "including multiple labels",
                "value": "id,count"
              }
            },
            "name": "include",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "label name(s) to exclude from the result as scalar or comma separated",
            "examples": {
              "single": {
                "description": "excluding a single label",
                "value": "id"
              },
              "multiple": {
                "description": "excluding multiple labels",
                "value": "id,count"
              }
            },
            "name": "exclude",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "enable filtering for multiple values with an array of values",
            "example": true,
            "name": "multiFilter",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExportedLabelValues"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/test/{id}/move": {
      "post": {
        "description": "Update the folder for a Test. Tests can be moved to different folders",
        "operationId": "TestService_updateFolder",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to update",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "New folder to store the tests",
            "example": "My Benchmark Folder",
            "name": "folder",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/test/{id}/notifications": {
      "post": {
        "description": "Update notifications for a Test. It is possible to disable notifications for a Test, so that no notifications are sent to subscribers",
        "operationId": "TestService_updateNotifications",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to update",
            "example": 101,
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Whether notifications are enabled",
            "example": false,
            "name": "enabled",
            "required": true,
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/test/{id}/recalculate": {
      "post": {
        "description": "Recalculate Datasets for Test",
        "operationId": "TestService_recalculateTestDatasets",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to recalculate datasets for",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      },
      "get": {
        "description": "Get recalculation status for Test",
        "operationId": "TestService_getTestRecalculationStatus",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to retrieve recalculation status for",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RecalculationStatus"
                }
              }
            }
          }
        }
      }
    },
    "/api/test/{id}/transformers": {
      "post": {
        "description": "Update transformers for Test",
        "operationId": "TestService_updateTransformers",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to retrieve Label Values for",
            "example": 101,
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/test/{id}/updateAccess": {
      "post": {
        "description": "Update the Access configuration for a Test",
        "operationId": "TestService_updateTestAccess",
        "tags": ["Test"],
        "parameters": [
          {
            "description": "Test ID to update",
            "example": 101,
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "Name of the new owner",
            "example": "perf-team",
            "name": "owner",
            "required": true,
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "New Access level for the Test",
            "example": "0",
            "name": "access",
            "required": true,
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/Access"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/ui/view": {
      "post": {
        "operationId": "UIService_updateView",
        "tags": ["ui"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/View"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/View"
                }
              }
            }
          }
        }
      }
    },
    "/api/ui/views": {
      "post": {
        "operationId": "UIService_createViews",
        "tags": ["ui"],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/View"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created"
          }
        }
      }
    },
    "/api/ui/{testId}/view/{viewId}": {
      "delete": {
        "operationId": "UIService_deleteView",
        "tags": ["ui"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "viewId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/api/ui/{testId}/views": {
      "get": {
        "operationId": "UIService_getViews",
        "tags": ["ui"],
        "parameters": [
          {
            "name": "testId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/View"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/user/administrators": {
      "post": {
        "description": "Set the list of administrator users.",
        "operationId": "UserService_updateAdministrators",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      },
      "get": {
        "description": "Get the list of administrator users.",
        "operationId": "UserService_administrators",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/allTeams": {
      "get": {
        "description": "Get list of all teams.",
        "operationId": "UserService_getAllTeams",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/apikey": {
      "post": {
        "description": "Create a new API key.",
        "operationId": "UserService_newApiKey",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "type": {
                    "$ref": "#/components/schemas/KeyType"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      },
      "get": {
        "description": "List API keys.",
        "operationId": "UserService_apiKeys",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApiKeyResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/apikey/{id}/rename": {
      "put": {
        "description": "Rename API key.",
        "operationId": "UserService_renameApiKey",
        "tags": ["User"],
        "parameters": [
          {
            "description": "id of the key to be renamed",
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/apikey/{id}/revoke": {
      "put": {
        "description": "Revoke API key.",
        "operationId": "UserService_revokeApiKey",
        "tags": ["User"],
        "parameters": [
          {
            "description": "id of the key to be revoked",
            "in": "path",
            "name": "id",
            "schema": {
              "type": "integer"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/createUser": {
      "post": {
        "description": "Create new user.",
        "operationId": "UserService_createUser",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/UserData"
                  },
                  "password": {
                    "type": "string"
                  },
                  "team": {
                    "type": "string"
                  },
                  "roles": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/defaultTeam": {
      "post": {
        "description": "Set the default team of the current user.",
        "operationId": "UserService_setDefaultTeam",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "text/plain": {
              "schema": {
                "type": "string"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      },
      "get": {
        "description": "Get the default team of the current user.",
        "operationId": "UserService_defaultTeam",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/info": {
      "post": {
        "description": "Fetch user data for a group of users.",
        "operationId": "UserService_info",
        "tags": ["User"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/roles": {
      "get": {
        "description": "Get roles for the authenticated user.",
        "operationId": "UserService_getRoles",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/search": {
      "get": {
        "description": "Search for user(s) with an optional query condition.",
        "operationId": "UserService_searchUsers",
        "tags": ["User"],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserData"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/team/{team}": {
      "delete": {
        "description": "Remove existing team.",
        "operationId": "UserService_deleteTeam",
        "tags": ["User"],
        "parameters": [
          {
            "description": "Name of the team to be removed",
            "in": "path",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      },
      "post": {
        "description": "Create new team.",
        "operationId": "UserService_addTeam",
        "tags": ["User"],
        "parameters": [
          {
            "description": "Name of the team to be created",
            "in": "path",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/team/{team}/members": {
      "post": {
        "description": "Set the membership of a given team.",
        "operationId": "UserService_updateTeamMembers",
        "tags": ["User"],
        "parameters": [
          {
            "description": "Name of the team",
            "in": "path",
            "name": "team",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": {
                  "type": "array",
                  "items": {}
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      },
      "get": {
        "description": "Get the membership of a given team.",
        "operationId": "UserService_teamMembers",
        "tags": ["User"],
        "parameters": [
          {
            "description": "Name of the team",
            "in": "path",
            "name": "team",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {}
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/teams": {
      "get": {
        "description": "Get list of all teams.",
        "operationId": "UserService_getTeams",
        "tags": ["User"],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    },
    "/api/user/{username}": {
      "delete": {
        "description": "Remove existing user.",
        "operationId": "UserService_removeUser",
        "tags": ["User"],
        "parameters": [
          {
            "description": "Username to remove",
            "in": "path",
            "name": "username",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Not Authorized"
          },
          "403": {
            "description": "Not Allowed"
          }
        },
        "security": [
          {
            "SecurityScheme": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "Horreum API",
    "version": "0.1-SNAPSHOT",
    "description": "Horreum data repository API",
    "contact": {
      "url": "http://horreum.hyperfoil.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  }
}
