name: container-build

on:
  # Trigger on push to any branch when relevant files change
  push:
    paths:
      - 'Containerfile'
      - 'package.json'
      - 'package-lock.json'
      - 'src/**'
      - 'scripts/**/*.sh'
      - '.github/workflows/container-build.yml'
  # Trigger on pull requests
  pull_request:
    paths:
      - 'Containerfile'
      - 'package.json'
      - 'package-lock.json'
      - 'src/**'
      - 'scripts/**/*.sh'
      - '.github/workflows/container-build.yml'
  # Trigger on GitHub releases
  release:
    types: [published]
  workflow_dispatch: {}

concurrency:
  group: container-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_REPO: ${{ vars.IMAGE_REPO }}
  OCI_REVISION: ${{ github.sha }}

jobs:
  build_scan_and_push:
    name: Build, scan, and push container image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
      QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
    steps:
      - name: Check IMAGE_REPO configured
        run: |
          if [ -z "${IMAGE_REPO}" ]; then
            echo "Repository variable IMAGE_REPO is required (e.g., quay.io/<org>/horreum-mcp)" >&2
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Compute tags
        id: compute_tag
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # For releases, use the release tag (e.g., v1.2.3)
            VERSION="${{ github.event.release.tag_name }}"
            echo "tag=${VERSION}" >> "$GITHUB_OUTPUT"
            echo "additional_tag=latest" >> "$GITHUB_OUTPUT"
            echo "Building release version: ${VERSION}"
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            # For PRs, use PR number and short SHA (e.g., pr-123-a1b2c3d)
            PR_NUM="${{ github.event.pull_request.number }}"
            SHORT_SHA="${GITHUB_SHA:0:7}"
            echo "tag=pr-${PR_NUM}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
            echo "additional_tag=pr-${PR_NUM}" >> "$GITHUB_OUTPUT"
            echo "Building PR #${PR_NUM} commit: ${SHORT_SHA}"
          else
            # For branch pushes, use branch name and short SHA
            BRANCH_NAME="${{ github.ref_name }}"
            SHORT_SHA="${GITHUB_SHA:0:7}"
            # Sanitize branch name for container tags (replace / with -)
            SAFE_BRANCH=$(echo "$BRANCH_NAME" | sed 's/\//-/g')
            
            if [ "$BRANCH_NAME" = "main" ]; then
              # Main branch: use SHA as primary tag, 'main' as additional
              echo "tag=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
              echo "additional_tag=main" >> "$GITHUB_OUTPUT"
              echo "Building main branch commit: ${SHORT_SHA}"
            else
              # Development branch: use branch-SHA as primary, branch name as additional
              echo "tag=${SAFE_BRANCH}-${SHORT_SHA}" >> "$GITHUB_OUTPUT"
              echo "additional_tag=${SAFE_BRANCH}" >> "$GITHUB_OUTPUT"
              echo "Building branch '${BRANCH_NAME}' commit: ${SHORT_SHA}"
            fi
          fi

      - name: Install buildah/podman/qemu
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends podman buildah qemu-user-static

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies and build
        run: |
          npm ci
          npm run build

      - name: Enable binfmt (best-effort)
        run: |
          podman run --privileged --rm tonistiigi/binfmt --install all || true

      - name: Build multi-arch container image
        env:
          TAG: ${{ steps.compute_tag.outputs.tag }}
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          # Set expiration based on build type
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "Building release - no expiration"
            bash scripts/build_multiarch.sh --tag "$TAG" --expires ""
          elif [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "Building PR - 14d expiration"
            bash scripts/build_multiarch.sh --tag "$TAG" --expires "14d"
          elif [ "$BRANCH_NAME" = "main" ]; then
            echo "Building main branch - 90d expiration"
            bash scripts/build_multiarch.sh --tag "$TAG" --expires "90d"
          else
            echo "Building dev branch '$BRANCH_NAME' - 30d expiration"
            bash scripts/build_multiarch.sh --tag "$TAG" --expires "30d"
          fi

      - name: Import buildah image to podman for scanning
        env:
          TAG: ${{ steps.compute_tag.outputs.tag }}
        run: |
          # Buildah and Podman use separate storage backends
          # Push from buildah storage to podman storage so Trivy can access it
          # Keep the same tag to avoid any manifest issues
          buildah push "${IMAGE_REPO}:${TAG}-amd64" \
            "containers-storage:${IMAGE_REPO}:${TAG}-amd64"
          # Verify the image is now in podman storage
          podman images | grep "${TAG}-amd64"

      - name: Start Podman socket for Trivy
        run: |
          # Start Podman service socket so Trivy can access images
          # Podman doesn't run daemonized by default
          systemctl --user start podman.socket
          systemctl --user status podman.socket

      - name: Install Trivy
        run: |
          wget -qO- https://aquasecurity.github.io/trivy-repo/deb/public.key | \
            sudo gpg --dearmor -o /usr/share/keyrings/trivy.gpg
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] \
            https://aquasecurity.github.io/trivy-repo/deb generic main" | \
            sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Trivy security scan
        env:
          TAG: ${{ steps.compute_tag.outputs.tag }}
        run: |
          # Scan the amd64 image via Podman socket
          # Image was copied from buildah to podman with the same tag
          bash scripts/trivy_scan.sh "${IMAGE_REPO}:${TAG}-amd64"

      - name: Login to Quay.io
        if: env.QUAY_USERNAME != '' && env.QUAY_PASSWORD != ''
        run: |
          echo "$QUAY_PASSWORD" | podman login -u "$QUAY_USERNAME" --password-stdin quay.io
          echo "$QUAY_PASSWORD" | buildah login -u "$QUAY_USERNAME" --password-stdin quay.io

      - name: Push multi-arch image to registry
        env:
          TAG: ${{ steps.compute_tag.outputs.tag }}
          ADDITIONAL_TAG: ${{ steps.compute_tag.outputs.additional_tag }}
        run: |
          # Push with primary tag (SHA or version)
          echo "Pushing ${IMAGE_REPO}:${TAG}"
          buildah manifest push --all "${IMAGE_REPO}:${TAG}" \
            "docker://${IMAGE_REPO}:${TAG}"

          # Also push with additional tag (main or latest)
          echo "Pushing ${IMAGE_REPO}:${ADDITIONAL_TAG}"
          buildah manifest push --all "${IMAGE_REPO}:${TAG}" \
            "docker://${IMAGE_REPO}:${ADDITIONAL_TAG}"
